theme(legend.position = "bottom")
ggsave("image.png")
LifeCycleSavings
update.packages()
y
?islands
graphics.off()
rm(list = ls())
gc()
version
library(tidyverse)
islands
atrribute(islands)
atrributes(islands)
?attributes
attributes(islands)
autoplot(islands)
islands$names
attributes(islands) |> unlist()
?islands
df <- data_frame(name = attributes(islands),
area = islands)
df
df <- data_frame(name = unlist(attributes(islands)),
area = islands)
df
df <- data_frame(name = unlist(attributes(islands)),
area = islands) |> arrange(area, desc())
?arrange
df <- data_frame(name = unlist(attributes(islands)),
area = islands) |> arrange(desc(area))
df
?islands
dotchart(log(islands[order(islands)], 10),
main = "islands data: log10(area) (log10(sq. miles))")
?structure
?islands
?slice
emd::ji_find("thinking")
emo::ji_find("thinking")
df |> ggplt(aes(x = reorder(area), y = name)) +
geom_segment()
df |> ggplot(aes(x = reorder(area), y = name)) +
geom_segment()
?reorder
df |> ggplot(aes(x = reorder(area, area), y = name)) +
geom_segment()
df |> ggplot(aes(x = area, y = name)) +
geom_segment()
df |> ggplot(aes(xend = area, yend = name)) +
geom_segment()
?geom_segment
df |> ggplot(aes(x = 0, y = name, xend = area, yend = name)) +
geom_segment()
df |> ggplot(aes(x = 0, y = reorder(name, area), xend = area, yend = name)) +
geom_segment()
df |> ggplot(aes(x = 0, y = reorder(name, area), xend = area, yend = name), color = name) +
geom_segment()
df |> ggplot(aes(x = 0, y = reorder(name, area), xend = area, yend = name, color = name)) +
geom_segment()
df |> ggplot(aes(x = 0, y = reorder(name, area), xend = area, yend = name,
color = name)) +
geom_segment(show.legend = FALSE)
df |> ggplot(aes(x = 0, y = reorder(name, area), xend = log10(area), yend = name,
color = name)) +
geom_segment(show.legend = FALSE)
df |> ggplot(aes(x = 0, y = reorder(name, area), xend = log10(area), yend = name,
color = name)) +
geom_segment(show.legend = FALSE) +
geom_point(show.legend = FALSE)
df |> ggplot(aes(x = 0, y = reorder(name, area), xend = log10(area), yend = name,
color = name)) +
geom_segment(show.legend = FALSE) +
geom_point(aes(x = log10(area)), show.legend = FALSE)
?islands
theme_light()
df |> ggplot(aes(x = 0, y = reorder(name, area), xend = log10(area), yend = name,
color = name)) +
geom_segment(show.legend = FALSE) +
geom_point(aes(x = log10(area)), show.legend = FALSE) +
labs(title = "Areas of the World's Major Landmasses",
subtitle = "The areas in thousands of square miles of the landmasses which exceed 10,000 square miles.",
x = "Area, log10(sq.mile)", y = NULL) +
theme_light()
df |> ggplot(aes(x = 0, y = reorder(name, area), xend = log10(area), yend = name,
color = name)) +
geom_segment(show.legend = FALSE) +
geom_point(aes(x = log10(area)), show.legend = FALSE) +
labs(title = "Areas of the World's Major Landmasses",
subtitle = "The areas in thousands of square miles of the landmasses \nwhich exceed 10,000 square miles.",
x = "Area, log10(sq.mile)", y = NULL) +
theme_light()
df |> ggplot(aes(x = 0, y = reorder(name, area), xend = log10(area), yend = name,
color = name)) +
geom_segment(show.legend = FALSE) +
geom_point(aes(x = log10(area)), show.legend = FALSE) +
scale_color_brewer() +
labs(title = "Areas of the World's Major Landmasses",
subtitle = "The areas in thousands of square miles of the landmasses \nwhich exceed 10,000 square miles.",
x = "Area, log10(sq.mile)", y = NULL) +
theme_light()
df |> ggplot(aes(x = 0, y = reorder(name, area), xend = log10(area), yend = name,
color = name)) +
geom_segment(show.legend = FALSE) +
geom_point(aes(x = log10(area)), show.legend = FALSE) +
scale_color_brewer(palette = "Set1") +
labs(title = "Areas of the World's Major Landmasses",
subtitle = "The areas in thousands of square miles of the landmasses \nwhich exceed 10,000 square miles.",
x = "Area, log10(sq.mile)", y = NULL) +
theme_light()
df |> ggplot(aes(x = 0, y = reorder(name, area), xend = log10(area), yend = name,
color = name)) +
geom_segment(show.legend = FALSE) +
geom_point(aes(x = log10(area)), show.legend = FALSE) +
scale_color_brewer(palette = "Set2") +
labs(title = "Areas of the World's Major Landmasses",
subtitle = "The areas in thousands of square miles of the landmasses \nwhich exceed 10,000 square miles.",
x = "Area, log10(sq.mile)", y = NULL) +
theme_light()
df |> ggplot(aes(x = 0, y = reorder(name, area), xend = log10(area), yend = name,
color = name)) +
geom_segment(show.legend = FALSE) +
geom_point(aes(x = log10(area)), show.legend = FALSE) +
labs(title = "Areas of the World's Major Landmasses",
subtitle = "The areas in thousands of square miles of the landmasses \nwhich exceed 10,000 square miles.",
x = "Area, log10(sq.mile)", y = NULL) +
theme_light()
Great! It looks much better!
# Create a vector of colors
colors <- c("red", "blue", "green")
# Create a color palette function
palette_func <- colorRampPalette(colors)
# Generate a color palette with 10 colors
color_palette <- palette_func(10)
# Print the color palette
print(color_palette)
len(df$name)
nrow(df)
# Generate a color palette with 10 colors
color_palette <- palette_func(nrow(df))
# Create a vector of colors
colors <- c("red", "blue", "green")
# Create a color palette function
palette_func <- colorRampPalette(colors)
# Generate a color palette with 10 colors
color_palette <- palette_func(nrow(df))
# Print the color palette
print(color_palette)
df |> ggplot(aes(x = 0, y = reorder(name, area), xend = log10(area), yend = name,
color = name)) +
geom_segment(show.legend = FALSE) +
geom_point(aes(x = log10(area)), show.legend = FALSE) +
scale_color_manual(palette = color_palette)
df |> ggplot(aes(x = 0, y = reorder(name, area), xend = log10(area), yend = name,
color = name)) +
geom_segment(show.legend = FALSE) +
geom_point(aes(x = log10(area)), show.legend = FALSE) +
scale_color_manual(values = color_palette)
# Create a vector of colors
colors <- c("#3182bd", "#9ecae1", "#deebf7")
# Create a color palette function
palette_func <- colorRampPalette(colors)
# Generate a color palette with 10 colors
color_palette <- palette_func(nrow(df))
# Print the color palette
print(color_palette)
df |> ggplot(aes(x = 0, y = reorder(name, area), xend = log10(area), yend = name,
color = name)) +
geom_segment(show.legend = FALSE) +
geom_point(aes(x = log10(area)), show.legend = FALSE) +
scale_color_manual(values = color_palette)
labs(title = "Areas of the World's Major Landmasses",
subtitle = "The areas in thousands of square miles of the landmasses \nwhich exceed 10,000 square miles.",
x = "Area, log10(sq.mile)", y = NULL) +
theme_light()
df |> ggplot(aes(x = 0, y = reorder(name, area), xend = log10(area), yend = name,
color = reorder(name, area))) +
geom_segment(show.legend = FALSE) +
geom_point(aes(x = log10(area)), show.legend = FALSE) +
scale_color_manual(values = color_palette)
labs(title = "Areas of the World's Major Landmasses",
subtitle = "The areas in thousands of square miles of the landmasses \nwhich exceed 10,000 square miles.",
x = "Area, log10(sq.mile)", y = NULL) +
theme_light()
?reorder
df |> ggplot(aes(x = 0, y = reorder(name, area), xend = log10(area), yend = name,
color = reorder(name, area, decreasing = TRUE))) +
geom_segment(show.legend = FALSE) +
geom_point(aes(x = log10(area)), show.legend = FALSE) +
scale_color_manual(values = color_palette)
# Create a vector of colors
colors <- c("#191970", "#0000cd", "#4682b4")
# Create a color palette function
palette_func <- colorRampPalette(colors)
# Generate a color palette with 10 colors
color_palette <- palette_func(nrow(df))
# Print the color palette
print(color_palette)
df |> ggplot(aes(x = 0, y = reorder(name, area), xend = log10(area), yend = name,
color = reorder(name, area, decreasing = TRUE))) +
geom_segment(show.legend = FALSE) +
geom_point(aes(x = log10(area)), show.legend = FALSE) +
scale_color_manual(values = color_palette)
labs(title = "Areas of the World's Major Landmasses",
subtitle = "The areas in thousands of square miles of the landmasses \nwhich exceed 10,000 square miles.",
x = "Area, log10(sq.mile)", y = NULL) +
theme_light()
# Create a vector of colors
colors <- c("#191970", "#4682b4", "#b0c4de")
# Create a color palette function
palette_func <- colorRampPalette(colors)
# Generate a color palette with 10 colors
color_palette <- palette_func(nrow(df))
# Print the color palette
print(color_palette)
df |> ggplot(aes(x = 0, y = reorder(name, area), xend = log10(area), yend = name,
color = reorder(name, area, decreasing = TRUE))) +
geom_segment(show.legend = FALSE) +
geom_point(aes(x = log10(area)), show.legend = FALSE) +
scale_color_manual(values = color_palette)
labs(title = "Areas of the World's Major Landmasses",
subtitle = "The areas in thousands of square miles of the landmasses \nwhich exceed 10,000 square miles.",
x = "Area, log10(sq.mile)", y = NULL) +
theme_light()
labs(title = "Areas of the World's Major Landmasses",
subtitle = "The areas in thousands of square miles of the landmasses \nwhich exceed 10,000 square miles.",
x = "Area, log10(sq.mile)", y = NULL) +
theme_minimal()
df |> ggplot(aes(x = 0, y = reorder(name, area), xend = log10(area), yend = name,
color = reorder(name, area, decreasing = TRUE))) +
geom_segment(show.legend = FALSE) +
geom_point(aes(x = log10(area)), show.legend = FALSE) +
scale_color_manual(values = color_palette)
labs(title = "Areas of the World's Major Landmasses",
subtitle = "The areas in thousands of square miles of the landmasses \nwhich exceed 10,000 square miles.",
x = "Area, log10(sq.mile)", y = NULL) +
theme_minimal()
df |> ggplot(aes(x = 0, y = reorder(name, area), xend = log10(area), yend = name,
color = reorder(name, area, decreasing = TRUE))) +
geom_segment(show.legend = FALSE) +
geom_point(aes(x = log10(area)), show.legend = FALSE) +
scale_color_manual(values = color_palette) +
labs(title = "Areas of the World's Major Landmasses",
subtitle = "The areas in thousands of square miles of the landmasses \nwhich exceed 10,000 square miles.",
x = "Area, log10(sq.mile)", y = NULL) +
theme_minimal()
df |> ggplot(aes(x = 0, y = reorder(name, area), xend = log10(area), yend = name,
color = reorder(name, area, decreasing = TRUE))) +
geom_segment(show.legend = FALSE) +
geom_point(aes(x = log10(area)), show.legend = FALSE) +
scale_color_manual(values = color_palette) +
labs(title = "`r emo::ji("earth")` Areas of the World's Major Landmasses",
df |> ggplot(aes(x = 0, y = reorder(name, area), xend = log10(area), yend = name,
color = reorder(name, area, decreasing = TRUE))) +
geom_segment(show.legend = FALSE) +
geom_point(aes(x = log10(area)), show.legend = FALSE) +
scale_color_manual(values = color_palette) +
labs(title = paste0(emo::ji("earth"), "Areas of the World's Major Landmasses"),
subtitle = "The areas in thousands of square miles of the landmasses \nwhich exceed 10,000 square miles.",
x = "Area, log10(sq.mile)", y = NULL) +
theme_minimal()
df |> ggplot(aes(x = 0, y = reorder(name, area), xend = log10(area), yend = name,
color = reorder(name, area, decreasing = TRUE))) +
geom_segment(show.legend = FALSE) +
geom_point(aes(x = log10(area)), show.legend = FALSE) +
scale_color_manual(values = color_palette) +
labs(title = emo::ji("earth"),
subtitle = "The areas in thousands of square miles of the landmasses \nwhich exceed 10,000 square miles.",
x = "Area, log10(sq.mile)", y = NULL) +
theme_minimal()
?islands
df |> ggplot(aes(x = 0, y = reorder(name, area), xend = log10(area), yend = name,
color = reorder(name, area, decreasing = TRUE))) +
geom_segment(show.legend = FALSE) +
geom_point(aes(x = log10(area)), show.legend = FALSE) +
scale_color_manual(values = color_palette) +
labs(title = "Areas of the World's Major Landmasses",
subtitle = "The areas in thousands of square miles of the landmasses \nwhich exceed 10,000 square miles.",
x = "Area, log10(sq.mile)", y = NULL) +
theme_minimal()
# Create a vector of colors
colors <- c("#191970", "#4682b4", "#b0c4de")
# Create a color palette function
palette_func <- colorRampPalette(colors)
# Generate a color palette with number of rows
color_palette <- palette_func(nrow(df))
df |> ggplot(aes(x = 0, y = reorder(name, area), xend = log10(area), yend = name,
color = reorder(name, area, decreasing = TRUE))) +
geom_segment(show.legend = FALSE) +
geom_point(aes(x = log10(area)), show.legend = FALSE) +
scale_color_manual(values = color_palette) +
labs(title = "Areas of the World's Major Landmasses",
subtitle = "The areas in thousands of square miles of the landmasses \nwhich exceed 10,000 square miles.",
x = "Area, log10(sq.mile)", y = NULL) +
theme_minimal()
df |> ggplot(aes(x = 0, y = reorder(name, area), xend = log10(area), yend = name,
color = reorder(name, area, decreasing = TRUE))) +
geom_segment(show.legend = FALSE) +
geom_point(aes(x = log10(area)), show.legend = FALSE) +
scale_color_manual(values = color_palette) +
labs(title = "Areas of the World's Major Landmasses",
subtitle = "The areas in thousands of square miles of the landmasses \nwhich exceed 10,000 square miles.",
x = "Area, log10(sq.mile)", y = NULL) +
theme_bw()
df |> ggplot(aes(x = 0, y = reorder(name, area), xend = log10(area), yend = name,
color = reorder(name, area, decreasing = TRUE))) +
geom_segment(show.legend = FALSE) +
geom_point(aes(x = log10(area)), show.legend = FALSE) +
scale_color_manual(values = color_palette) +
labs(title = "Areas of the World's Major Landmasses",
subtitle = "The areas in thousands of square miles of the landmasses \nwhich exceed 10,000 square miles.",
x = "Area, log10(sq.mile)", y = NULL) +
theme_minimal()
df |> ggplot(aes(x = 0, y = reorder(name, area), xend = log10(area), yend = name,
color = reorder(name, area, decreasing = TRUE))) +
geom_segment(show.legend = FALSE) +
geom_point(aes(x = log10(area)), show.legend = FALSE) +
scale_color_manual(values = color_palette) +
labs(title = "Areas of the World's Major Landmasses",
subtitle = "The areas in thousands of square miles of the landmasses which exceed 10,000 square miles.",
x = "Area, log10(sq.mile)", y = NULL) +
theme_minimal()
data()
ability.cov
lh
rock
uspop
Formaldehyde
BOD
DNase
Puromycin
Theoph
airmiles
esoph
WorldPhones
?WorldPhones
graphics.off()
rm(list = ls())
gc()
version
library(tidyverse)
WorldPhones |> head()
WorldPhones |> class()
df <- as_data_frame(WorldPhones)
df <- as.data.frame(WorldPhones)
class(df)
dim(df)
matplot(rownames(WorldPhones), WorldPhones, type = "b", log = "y",
xlab = "Year", ylab = "Number of telephones (1000's)")
legend(1951.5, 80000, colnames(WorldPhones), col = 1:6, lty = 1:5,
pch = rep(21, 7))
title(main = "World phones data: log scale for response")
barplot(WorldPhones)
barplot(WorldPhones)
title(main = "World phones data: log scale for response")
?barplot
barplot(t(WorldPhones))
title(main = "World phones data: log scale for response")
barplot(t(WorldPhones$1961))
barplot(t(WorldPhones))
t(WorldPhones)
barplot(t(WorldPhones))
title(main = "World phones data: log scale for response")
barplot(t(WorldPhones))
title(main = "World phones data")
WorldPhones
barplot(WorldPhones, subset = 1961)
title(main = "World phones data")
barplot(WorldPhones, subset = "1961")
title(main = "World phones data")
barplot(t(WorldPhones))
title(main = "World phones data")
barplot(t(WorldPhones))
title(main = "World phones data")
barplot(t(WorldPhones)[,7])
title(main = "World phones data")
barplot(t(WorldPhones)[,7])
title(main = "World phones data")
barplot(t(WorldPhones)[,7])
title(main = "World phones data in 1961")
# Create a data frame
df <- data.frame(
group = c("A", "A", "B", "B"),
variable = c("X", "Y", "X", "Y"),
value = c(1, 2, 3, 4)
)
# Create a stacked bar plot
barplot(
height = t(matrix(df$value, nrow = 2)),
col = c("red", "blue"),
legend.text = c("X", "Y"),
args.legend = list(x = "topright"),
beside = TRUE,
names.arg = c("A", "B")
)
# Create a data frame
df <- data.frame(
group = c("A", "A", "B", "B"),
variable = c("X", "Y", "X", "Y"),
value = c(1, 2, 3, 4)
)
# Create a stacked bar plot
barplot(
height = t(matrix(df$value, nrow = 2)),
col = c("red", "blue"),
legend.text = c("X", "Y"),
args.legend = list(x = "topright"),
beside = TRUE,
names.arg = c("A", "B")
)
?WorldPhones
df
graphics.off()
rm(list = ls())
gc()
version
library(tidyverse)
WorldPhones |> head()
WorldPhones |> class()
df <- as.data.frame(WorldPhones)
class(df)
dim(df)
barplot(t(WorldPhones)[,7])
title(main = "World phones data in 1961")
df
df |> select([,7])
df[,1]
?as.data.frame
df[1,]
attributes(WorldPhones)
rownames(df)
colnames(df)
df |> filter(rownames(df) == "1961")
df |> filter(rownames(df) == "1961") |> pivot_longer(names_to = 1961, values_to = everything())
df |> filter(rownames(df) == "1961") |> pivot_longer(names_to = "1961", values_to = everything())
df |> filter(rownames(df) == "1961") |> pivot_longer(values_to = everything())
df |> filter(rownames(df) == "1961") |> pivot_longer()
graphics.off()
rm(list = ls())
gc()
version
library(tidyverse)
WorldPhones |> head()
WorldPhones |> class()
df <- as.data.frame(WorldPhones)
df <- df |> mutate(year = as.numeric(rownames(df)), .before = "N.Amer")
rownames(df) <- NULL
df
class(df)
dim(df)
barplot(t(WorldPhones)[,7])
title(main = "World phones data in 1961")
df |>
filter(year == "1961") |>
pivot_longer(-year, names_to = "region", values_to = "num_tele") |>
ggplot(aes(x = "",y = num_tele, fill = region)) +
geom_col()
df |>
filter(year == "1961") |>
pivot_longer(-year, names_to = "region", values_to = "num_tele") |>
ggplot(aes(x = "",y = reorder(num_tele, num_tele), fill = region)) +
geom_col(width = 0.5) +
coord_flip()
df |>
filter(year == "1961") |>
pivot_longer(-year, names_to = "region", values_to = "num_tele") |>
ggplot(aes(x = "",y = reorder(num_tele, num_tele), fill = region)) +
geom_col(width = 0.5) +
geom_text(aes(label = num_tele), angle = -90,
position = position_stack(vjust = 0.5)) +
scale_fill_brewer(palette = "Set2") +
coord_flip()
df |>
filter(year == "1961") |>
pivot_longer(-year, names_to = "region", values_to = "num_tele") |>
ggplot(aes(x = "",y = reorder(num_tele, num_tele), fill = region)) +
geom_col(width = 0.5) +
geom_text(aes(label = paste0(region,"\n",num_tele)), angle = -90,
position = position_stack(vjust = 0.5)) +
scale_fill_brewer(palette = "Set2") +
coord_flip() +
labs(title = "The World's Telephones at 1961",
subtitle = "The number of telephones in various regions of the world (in thousands).",
fill = "Region") +
theme_void() +
theme(plot.margin = margin(80,10,50,10), legend.position = "bottom")
ggsave("image.png")
version()
version
install.packages(c("av", "BH", "brew", "brio", "cli", "commonmark", "cowplot", "cpp11", "curl", "data.table", "datamods", "DBI", "desc", "DiceDesign", "digest", "DT", "e1071", "esquisse", "fansi", "FNN", "fracdiff", "future", "future.apply", "gert", "ggfittext", "ggh4x", "gghighlight", "ggrepel", "glue", "gt", "htmlwidgets", "httpuv", "igraph", "infer", "interp", "ISOcodes", "jqr", "jsonlite", "kableExtra", "later", "LiblineaR", "listenv", "maps", "markdown", "MASS", "Matrix", "matrixStats", "mgcv", "modeldata", "patchwork", "pkgbuild", "pkgload", "plotly", "processx", "progress", "ps", "R.oo", "ragg", "Rcpp", "RcppAnnoy", "RcppArmadillo", "RCurl", "readr", "recipes", "reprex", "reticulate", "rJava", "rlang", "rnaturalearth", "roxygen2", "rpart", "RSQLite", "s2", "sass", "sf", "shinyWidgets", "sp", "stringi", "svglite", "tensorflow", "terra", "testthat", "tfruns", "tidyr", "timechange", "timeDate", "tseries", "tsibble", "uuid", "V8", "vctrs", "vroom", "withr", "xgboost", "xml2", "xts", "yaml", "yardstick", "zip"))
emo::ji("sweat_smile")
install.packages(c("boot", "callr", "curl", "data.table", "datamods", "DBI", "deldir", "dials", "digest", "DT", "forecast", "gganimate", "ggnewscale", "ggplot2", "globals", "hardhat", "igraph", "ISOcodes", "lava", "parallelly", "parsnip", "prettymapr", "quantmod", "ragg", "RcppArmadillo", "RcppEigen", "recipes", "renv", "rmarkdown", "rnaturalearthdata", "rpart.plot", "rvest", "sass", "shape", "shinybusy", "shinyWidgets", "showtext", "survival", "sysfonts", "systemfonts", "thematic", "tidyselect", "tinytex", "tweenr", "usethis", "V8", "workflows", "writexl", "xfun"))
data()
install.packages(c("brio", "bslib", "callr", "codetools", "data.table", "datamods", "dbplyr", "DT", "embed", "finetune", "fs", "future", "future.apply", "ggplot2", "gh", "gtable", "htmltools", "httpuv", "httr2", "infer", "keras", "knitr", "lattice", "lda", "lme4", "matrixStats", "munsell", "openssl", "parsnip", "phosphoricons", "pkgbuild", "pkgdown", "processx", "promises", "quanteda", "RcppArmadillo", "remotes", "renv", "repr", "reticulate", "rsample", "RSQLite", "rstudioapi", "sass", "sf", "shiny", "shinyWidgets", "sp", "survival", "tensorflow", "testthat", "tfruns", "tidymodels", "tidytext", "tinytex", "tune", "uwot", "workflowsets", "xfun", "xopen", "yardstick"))
install.packages(c("brio", "bslib", "callr", "codetools", "data.table", "datamods", "dbplyr", "DT", "embed", "finetune", "fs", "future", "future.apply", "ggplot2", "gh", "gtable", "htmltools", "httpuv", "httr2", "infer", "keras", "knitr", "lattice", "lda", "lme4", "matrixStats", "munsell", "openssl", "parsnip", "phosphoricons", "pkgbuild", "pkgdown", "processx", "promises", "quanteda", "RcppArmadillo", "remotes", "renv", "repr", "reticulate", "rsample", "RSQLite", "rstudioapi", "sass", "sf", "shiny", "shinyWidgets", "sp", "survival", "tensorflow", "testthat", "tfruns", "tidymodels", "tidytext", "tinytex", "tune", "uwot", "workflowsets", "xfun", "xopen", "yardstick"))
install.packages(c("brio", "bslib", "callr", "codetools", "data.table", "datamods", "dbplyr", "DT", "embed", "finetune", "fs", "future", "future.apply", "ggplot2", "gh", "gtable", "htmltools", "httpuv", "httr2", "infer", "keras", "knitr", "lattice", "lda", "lme4", "matrixStats", "munsell", "openssl", "parsnip", "phosphoricons", "pkgbuild", "pkgdown", "processx", "promises", "quanteda", "RcppArmadillo", "remotes", "renv", "repr", "reticulate", "rsample", "RSQLite", "rstudioapi", "sass", "sf", "shiny", "shinyWidgets", "sp", "survival", "tensorflow", "testthat", "tfruns", "tidymodels", "tidytext", "tinytex", "tune", "uwot", "workflowsets", "xfun", "xopen", "yardstick"))
install.packages(c("brio", "bslib", "callr", "codetools", "data.table", "datamods", "dbplyr", "DT", "embed", "finetune", "fs", "future", "future.apply", "ggplot2", "gh", "gtable", "htmltools", "httpuv", "httr2", "infer", "keras", "knitr", "lattice", "lda", "lme4", "matrixStats", "munsell", "openssl", "parsnip", "phosphoricons", "pkgbuild", "pkgdown", "processx", "promises", "quanteda", "RcppArmadillo", "remotes", "renv", "repr", "reticulate", "rsample", "RSQLite", "rstudioapi", "sass", "sf", "shiny", "shinyWidgets", "sp", "survival", "tensorflow", "testthat", "tfruns", "tidymodels", "tidytext", "tinytex", "tune", "uwot", "workflowsets", "xfun", "xopen", "yardstick"))
install.packages(c("brio", "bslib", "callr", "codetools", "data.table", "datamods", "dbplyr", "DT", "embed", "finetune", "fs", "future", "future.apply", "ggplot2", "gh", "gtable", "htmltools", "httpuv", "httr2", "infer", "keras", "knitr", "lattice", "lda", "lme4", "matrixStats", "munsell", "openssl", "parsnip", "phosphoricons", "pkgbuild", "pkgdown", "processx", "promises", "quanteda", "RcppArmadillo", "remotes", "renv", "repr", "reticulate", "rsample", "RSQLite", "rstudioapi", "sass", "sf", "shiny", "shinyWidgets", "sp", "survival", "tensorflow", "testthat", "tfruns", "tidymodels", "tidytext", "tinytex", "tune", "uwot", "workflowsets", "xfun", "xopen", "yardstick"))
install.packages(c("brio", "bslib", "callr", "codetools", "data.table", "datamods", "dbplyr", "DT", "embed", "finetune", "fs", "future", "future.apply", "ggplot2", "gh", "gtable", "htmltools", "httpuv", "httr2", "infer", "keras", "knitr", "lattice", "lda", "lme4", "matrixStats", "munsell", "openssl", "parsnip", "phosphoricons", "pkgbuild", "pkgdown", "processx", "promises", "quanteda", "RcppArmadillo", "remotes", "renv", "repr", "reticulate", "rsample", "RSQLite", "rstudioapi", "sass", "sf", "shiny", "shinyWidgets", "sp", "survival", "tensorflow", "testthat", "tfruns", "tidymodels", "tidytext", "tinytex", "tune", "uwot", "workflowsets", "xfun", "xopen", "yardstick"))
install.packages(c("brio", "bslib", "callr", "codetools", "data.table", "datamods", "dbplyr", "DT", "embed", "finetune", "fs", "future", "future.apply", "ggplot2", "gh", "gtable", "htmltools", "httpuv", "httr2", "infer", "keras", "knitr", "lattice", "lda", "lme4", "matrixStats", "munsell", "openssl", "parsnip", "phosphoricons", "pkgbuild", "pkgdown", "processx", "promises", "quanteda", "RcppArmadillo", "remotes", "renv", "repr", "reticulate", "rsample", "RSQLite", "rstudioapi", "sass", "sf", "shiny", "shinyWidgets", "sp", "survival", "tensorflow", "testthat", "tfruns", "tidymodels", "tidytext", "tinytex", "tune", "uwot", "workflowsets", "xfun", "xopen", "yardstick"))
install.packages(c("brio", "bslib", "callr", "codetools", "data.table", "datamods", "dbplyr", "DT", "embed", "finetune", "fs", "future", "future.apply", "ggplot2", "gh", "gtable", "htmltools", "httpuv", "httr2", "infer", "keras", "knitr", "lattice", "lda", "lme4", "matrixStats", "munsell", "openssl", "parsnip", "phosphoricons", "pkgbuild", "pkgdown", "processx", "promises", "quanteda", "RcppArmadillo", "remotes", "renv", "repr", "reticulate", "rsample", "RSQLite", "rstudioapi", "sass", "sf", "shiny", "shinyWidgets", "sp", "survival", "tensorflow", "testthat", "tfruns", "tidymodels", "tidytext", "tinytex", "tune", "uwot", "workflowsets", "xfun", "xopen", "yardstick"))
install.packages(c("brio", "bslib", "callr", "codetools", "data.table", "datamods", "dbplyr", "DT", "embed", "finetune", "fs", "future", "future.apply", "ggplot2", "gh", "gtable", "htmltools", "httpuv", "httr2", "infer", "keras", "knitr", "lattice", "lda", "lme4", "matrixStats", "munsell", "openssl", "parsnip", "phosphoricons", "pkgbuild", "pkgdown", "processx", "promises", "quanteda", "RcppArmadillo", "remotes", "renv", "repr", "reticulate", "rsample", "RSQLite", "rstudioapi", "sass", "sf", "shiny", "shinyWidgets", "sp", "survival", "tensorflow", "testthat", "tfruns", "tidymodels", "tidytext", "tinytex", "tune", "uwot", "workflowsets", "xfun", "xopen", "yardstick"))
install.packages(c("brio", "bslib", "callr", "codetools", "data.table", "datamods", "dbplyr", "DT", "embed", "finetune", "fs", "future", "future.apply", "ggplot2", "gh", "gtable", "htmltools", "httpuv", "httr2", "infer", "keras", "knitr", "lattice", "lda", "lme4", "matrixStats", "munsell", "openssl", "parsnip", "phosphoricons", "pkgbuild", "pkgdown", "processx", "promises", "quanteda", "RcppArmadillo", "remotes", "renv", "repr", "reticulate", "rsample", "RSQLite", "rstudioapi", "sass", "sf", "shiny", "shinyWidgets", "sp", "survival", "tensorflow", "testthat", "tfruns", "tidymodels", "tidytext", "tinytex", "tune", "uwot", "workflowsets", "xfun", "xopen", "yardstick"))
install.packages(c("brio", "bslib", "callr", "codetools", "data.table", "datamods", "dbplyr", "DT", "embed", "finetune", "fs", "future", "future.apply", "ggplot2", "gh", "gtable", "htmltools", "httpuv", "httr2", "infer", "keras", "knitr", "lattice", "lda", "lme4", "matrixStats", "munsell", "openssl", "parsnip", "phosphoricons", "pkgbuild", "pkgdown", "processx", "promises", "quanteda", "RcppArmadillo", "remotes", "renv", "repr", "reticulate", "rsample", "RSQLite", "rstudioapi", "sass", "sf", "shiny", "shinyWidgets", "sp", "survival", "tensorflow", "testthat", "tfruns", "tidymodels", "tidytext", "tinytex", "tune", "uwot", "workflowsets", "xfun", "xopen", "yardstick"))
install.packages(c("brio", "bslib", "callr", "codetools", "data.table", "datamods", "dbplyr", "DT", "embed", "finetune", "fs", "future", "future.apply", "ggplot2", "gh", "gtable", "htmltools", "httpuv", "httr2", "infer", "keras", "knitr", "lattice", "lda", "lme4", "matrixStats", "munsell", "openssl", "parsnip", "phosphoricons", "pkgbuild", "pkgdown", "processx", "promises", "quanteda", "RcppArmadillo", "remotes", "renv", "repr", "reticulate", "rsample", "RSQLite", "rstudioapi", "sass", "sf", "shiny", "shinyWidgets", "sp", "survival", "tensorflow", "testthat", "tfruns", "tidymodels", "tidytext", "tinytex", "tune", "uwot", "workflowsets", "xfun", "xopen", "yardstick"))
install.packages(c("brio", "bslib", "callr", "codetools", "data.table", "datamods", "dbplyr", "DT", "embed", "finetune", "fs", "future", "future.apply", "ggplot2", "gh", "gtable", "htmltools", "httpuv", "httr2", "infer", "keras", "knitr", "lattice", "lda", "lme4", "matrixStats", "munsell", "openssl", "parsnip", "phosphoricons", "pkgbuild", "pkgdown", "processx", "promises", "quanteda", "RcppArmadillo", "remotes", "renv", "repr", "reticulate", "rsample", "RSQLite", "rstudioapi", "sass", "sf", "shiny", "shinyWidgets", "sp", "survival", "tensorflow", "testthat", "tfruns", "tidymodels", "tidytext", "tinytex", "tune", "uwot", "workflowsets", "xfun", "xopen", "yardstick"))
install.packages(c("brio", "bslib", "callr", "codetools", "data.table", "datamods", "dbplyr", "DT", "embed", "finetune", "fs", "future", "future.apply", "ggplot2", "gh", "gtable", "htmltools", "httpuv", "httr2", "infer", "keras", "knitr", "lattice", "lda", "lme4", "matrixStats", "munsell", "openssl", "parsnip", "phosphoricons", "pkgbuild", "pkgdown", "processx", "promises", "quanteda", "RcppArmadillo", "remotes", "renv", "repr", "reticulate", "rsample", "RSQLite", "rstudioapi", "sass", "sf", "shiny", "shinyWidgets", "sp", "survival", "tensorflow", "testthat", "tfruns", "tidymodels", "tidytext", "tinytex", "tune", "uwot", "workflowsets", "xfun", "xopen", "yardstick"))
install.packages(c("brio", "bslib", "callr", "codetools", "data.table", "datamods", "dbplyr", "DT", "embed", "finetune", "fs", "future", "future.apply", "ggplot2", "gh", "gtable", "htmltools", "httpuv", "httr2", "infer", "keras", "knitr", "lattice", "lda", "lme4", "matrixStats", "munsell", "openssl", "parsnip", "phosphoricons", "pkgbuild", "pkgdown", "processx", "promises", "quanteda", "RcppArmadillo", "remotes", "renv", "repr", "reticulate", "rsample", "RSQLite", "rstudioapi", "sass", "sf", "shiny", "shinyWidgets", "sp", "survival", "tensorflow", "testthat", "tfruns", "tidymodels", "tidytext", "tinytex", "tune", "uwot", "workflowsets", "xfun", "xopen", "yardstick"))
install.packages("survival")
detach("package:base", unload = TRUE)
.libPaths()
install.packages(c("brio", "bslib", "callr", "data.table", "datamods", "dbplyr", "DT", "embed", "finetune", "fs", "future", "future.apply", "ggplot2", "gh", "gtable", "htmltools", "httpuv", "httr2", "infer", "keras", "knitr", "lda", "lme4", "matrixStats", "munsell", "openssl", "parsnip", "phosphoricons", "pkgbuild", "pkgdown", "processx", "promises", "quanteda", "RcppArmadillo", "remotes", "renv", "repr", "reticulate", "rsample", "RSQLite", "rstudioapi", "sass", "sf", "shiny", "shinyWidgets", "sp", "survival", "tensorflow", "testthat", "tfruns", "tidymodels", "tidytext", "tinytex", "tune", "uwot", "workflowsets", "xfun", "xopen", "yardstick"))
