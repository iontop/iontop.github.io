{
  "hash": "e010f64e7bddcb699cae341c61f6e017",
  "result": {
    "markdown": "---\ntitle: \"Bar Plot with HairEyeColor\"\nauthor: Sean Ahn [üìß](mailto:junho.ahn@gmail.com)\ndate: \"2023-08-19\"\ncategories: [ggplot, visualization]\nimage: \"image.png\"\n---\n\n\nIn this blog post, we'll cover how to plot a bar plot with ggplot2. Bar plots are one of the most popular graphs because they can convey meaning simply and intuitively.\n\n## Initilize\n\nI usually use the following code for initialization. If you don't want to remove plots and/or variables, you can skip it.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngraphics.off()\nrm(list = ls())\ngc()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n          used (Mb) gc trigger (Mb) limit (Mb) max used (Mb)\nNcells  733334 39.2    1272455   68         NA  1272455 68.0\nVcells 1297552  9.9    8388608   64      16384  1908739 14.6\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nversion\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n               _                           \nplatform       aarch64-apple-darwin20      \narch           aarch64                     \nos             darwin20                    \nsystem         aarch64, darwin20           \nstatus                                     \nmajor          4                           \nminor          3.1                         \nyear           2023                        \nmonth          06                          \nday            16                          \nsvn rev        84548                       \nlanguage       R                           \nversion.string R version 4.3.1 (2023-06-16)\nnickname       Beagle Scouts               \n```\n:::\n:::\n\n\n## Load Useful Library\n\nWe want to use as few packages (some might call them \"libraries\") as possible. If possible, I'm going to use only the **tidyverse** package. [Tidyverse](https://www.tidyverse.org) is one of the most famous packages in R programming, and it's really powerful and useful.\n\n[sclales](https://scales.r-lib.org) is a popular package in R that helps you convert values easily. It is also compatible with ggplot, which is a great help for visualization.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n‚îÄ‚îÄ Attaching core tidyverse packages ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidyverse 2.0.0 ‚îÄ‚îÄ\n‚úî dplyr     1.1.2     ‚úî readr     2.1.4\n‚úî forcats   1.0.0     ‚úî stringr   1.5.0\n‚úî ggplot2   3.4.2     ‚úî tibble    3.2.1\n‚úî lubridate 1.9.2     ‚úî tidyr     1.3.0\n‚úî purrr     1.0.1     \n‚îÄ‚îÄ Conflicts ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidyverse_conflicts() ‚îÄ‚îÄ\n‚úñ dplyr::filter() masks stats::filter()\n‚úñ dplyr::lag()    masks stats::lag()\n‚Ñπ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n\n```{.r .cell-code}\nlibrary(scales)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'scales'\n\nThe following object is masked from 'package:purrr':\n\n    discard\n\nThe following object is masked from 'package:readr':\n\n    col_factor\n```\n:::\n:::\n\n\n## Select Dataset\n\nWhen I write posts in my blog, I use the built-in dataset because I don't want the reader to suffer by having to find the data from somewhere else.\n\nThe dataset I'll be using in this post is shown below ‚¨áÔ∏è .\n\n<br>\n\n**Hair and Eye Color of Statistics Students**\n\n### Description\n\nDistribution of hair and eye color and sex in 592 statistics students.\n\n### Usage\n\nHairEyeColor\n\n### Format\n\nA 3-dimensional array resulting from cross-tabulating 592 observations on 3 variables. The variables and their levels are as follows:\n\nNo Name Levels 1 Hair Black, Brown, Red, Blond 2 Eye Brown, Blue, Hazel, Green 3 Sex Male, Female\n\n### Details\n\nThe Hair x Eye table comes from a survey of students at the University of Delaware reported by Snee (1974). The split by Sex was added by Friendly (1992a) for didactic purposes.\n\nThis data set is useful for illustrating various techniques for the analysis of contingency tables, such as the standard chi-squared test or, more generally, log-linear modelling, and graphical methods such as mosaic plots, sieve diagrams or association plots.\n\n<br>\n\nI use the `head()` function to quickly see what data is in a data set. The `HarEyeColor` dataset is a three-dimensional table, as mentioned above.\n\n:::callout-note\n\nWhen I asked Bing what the difference was between a table and a data frame, they told me as below;\n\nBing's answer: A table is a two-dimensional object that stores data in rows and columns, while a data frame is a collection of one-dimensional vectors that can have different data types and can mimic a table. A data frame is a term that comes from R, a programming language for data analysis. A data.table is a special type of data frame that has more features and faster performance.\n\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(HairEyeColor)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n, , Sex = Male\n\n       Eye\nHair    Brown Blue Hazel Green\n  Black    32   11    10     3\n  Brown    53   50    25    15\n  Red      10   10     7     7\n  Blond     3   30     5     8\n\n, , Sex = Female\n\n       Eye\nHair    Brown Blue Hazel Green\n  Black    36    9     5     2\n  Brown    66   34    29    14\n  Red      16    7     7     7\n  Blond     4   64     5     8\n```\n:::\n:::\n\n\n<br>\n\nConverting to a data frame is better for manipulating data in R. Try to convert table into data frame using `as.data.frame.table()` or `as.data.frame()` then store into the `df` variable.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- as.data.frame.table(HairEyeColor)\ndf |> head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Hair   Eye  Sex Freq\n1 Black Brown Male   32\n2 Brown Brown Male   53\n3   Red Brown Male   10\n4 Blond Brown Male    3\n5 Black  Blue Male   11\n6 Brown  Blue Male   50\n```\n:::\n:::\n\n\n<br>\n\nIf you were to draw a bar plot to visualize a dataset such as HairEyeColor, you would probably draw a plot like the one below. \n\nI've plotted a bar plot with men and women represented by different colors and separated by hair color using `facet_wrap()`. \n\nIf we just plotted a bar plot, it would be hard to tell the exact values, so we used `geom_text()` to display the values above each bar. If you want to use `geom_text()` to display the values, be sure to write **label = \"the value you want to display\"** in `aes()` of `ggplot()`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |> \n  ggplot(aes(x = Eye, y = Freq, fill = Sex, label = Freq)) +\n  geom_col(alpha = 0.8, position = \"dodge\") +\n  geom_text(aes(color = Sex, group = Sex), position = position_dodge(width = 1), vjust = -0.1, show.legend = FALSE) +\n  labs(x = \"Eye Color\", y = \"Frequency\") +\n  facet_wrap(~ Hair, strip.position = c(\"right\")) +\n  scale_y_continuous(limits = c(0,80), breaks = seq(0,80,20)) +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n<br>\n\nSometimes you want to highlight certain values in a bar graph. For example, if you want to highlight the eye colors that have the most of each in the hair color facet, the following code might be one of the appropriate answers. \n\nYou can also use ggplot extensions (such as [gghighlight](https://yutannihilation.github.io/gghighlight/articles/gghighlight.html)), but I only used the ggplot internal functions. The point is that we create one more column called \"Chk\" and fill it with different colors based on the value of \"Chk\".\n\nThis method is fairly simple, but very useful for displaying specific values without affecting the original dataset (no transformations). \n\nEspecially when you have a large number of values to represent and a large number of bars, you can emphasize the message you want by representing certain values with a different color that stands out.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |> \n  group_by(Hair) |> \n  mutate(Chk = max(Freq) == Freq) |> \n  ggplot(aes(x = Eye, y = Freq, label = Freq, group = Sex)) +\n  geom_col(aes(fill = Chk), color = \"white\", alpha = 0.8, position = \"dodge\", show.legend = FALSE) +\n  geom_text(aes(color = Chk, group = Sex), position = position_dodge(width = 1), vjust = -0.1, show.legend = FALSE) +\n  labs(title = \"Hair and Eye Color of Statistics Students\",\n       subtitle = \"Distribution of hair and eye color and sex in 592 statistics students.\", \n       x = \"Eye Color\", y = \"Frequency\") +\n  facet_wrap(~ Hair, strip.position = c(\"right\")) +\n  scale_y_continuous(limits = c(0,80), breaks = seq(0,80,20)) +\n  scale_fill_manual(values = c(\"gray80\",\"coral\")) +\n  scale_color_manual(values = c(\"gray80\", \"coral\")) +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n<br>\n\nWhen creating a bar plot and adding labels, sometimes you need to include both absolute values and percentages (%). \n\nThis code shows what to do in such situations. There are two ways to do this, I've used the `scales` package in the code below, and I've commented out the other way of calculating the % value and then adding the \"%\" symbol. Either way is your choice.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |> \n  filter(Sex == \"Male\") |> \n  group_by(Hair) |> \n  mutate(Ratio = Freq / sum(Freq)) |> \n  ggplot(aes(x = Eye, y = Freq, fill = Hair, label = Ratio)) +\n  geom_col(alpha = 0.8) +\n  # geom_text(aes(label = paste(round(Ratio*100,1), \"%\"), color = Hair), vjust = -0.1) +\n  geom_text(aes(label = paste0(scales::percent(round(Ratio,3)),\"\\n\",\"(\",Freq,\")\"), color = Hair), \n            vjust = -0.2, hjust = 0.5, show.legend = FALSE) +\n  labs(title = \"Hair and Eye Color of Statistics Students\",\n       subtitle = \"Distribution of hair and eye color and sex in 592 statistics students.\", \n       x = \"Eye Color\", y = \"Frequency\") +\n  facet_wrap(~ Hair, strip.position = c(\"right\")) +\n  scale_y_continuous(limits = c(0,80), breaks = seq(0,80,20)) +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n<br>\n\nAnother option is to overlay a line plot on top of a bar chart, which sometimes makes for a great visualization. Actually it's not really necessary for this data set, but if you wanted to show changes over time, a line plot like the one below would be very helpful for readers to understand. \n\nI think this is an example of how ggplot is a powerful visualization tool. üëç\n\n:::callout-tip\nAs you can see, when we draw a point, we draw two points for one value. This is to make it look better, so we draw one point large in white and the other small in the same color as the bar. This work makes the distinction between a bar and a point clearer and helps the reader understand the trend of the line more easily.\n:::\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |> \n  filter(Sex == \"Female\") |> \n  ggplot(aes(x = Eye, y = Freq, fill = Hair, label = Freq)) +\n  geom_col(alpha = 0.8) +\n  geom_point(color = \"white\", size = 4, show.legend = FALSE) +\n  geom_point(aes(color = Hair), size = 2, show.legend = FALSE) +\n  geom_path(aes(group = Hair, color = Hair), lty = 2, linewidth = 1, show.legend = FALSE) +\n  geom_text(aes(color = Hair), vjust = -1.0, show.legend = FALSE) +\n  labs(title = \"Hair and Eye Color of Statistics Students\",\n       subtitle = \"Distribution of hair and eye color and sex in 592 statistics students.\", \n       x = \"Eye Color\", y = \"Frequency\") +\n  facet_wrap(~ Hair) +\n  scale_y_continuous(limits = c(0,80), breaks = seq(0,80,20)) +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n<br>\n\n\n\n\n\n<div class=\"right\">\n__END OF POST__\n</div>",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}