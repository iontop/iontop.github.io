{
  "hash": "773912c19bf92bdfc783fd41c7b9170e",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Bar Plot with morley\"\nauthor: \"Sean Ahn\"\ndate: \"2023-08-26\"\ncategories: [ggplot, visualization]\nimage: \"nb_002.png\"\n---\n\n\n\nIn this post we will plot a bar histogram using data from the Michelson experiment and discuss what colors should be used for colorblind people when plotting a bar histogram. The plots we will create will be visible to colorblind people, so it is important that we visualize them using colors that are easily recognizable by everyone.\n\n## Initializing\n\nI usually use the following code for initialization. If you don't want to remove plots and/or variables, you can skip it.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngraphics.off()\nrm(list = ls())\ngc()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          used (Mb) gc trigger (Mb) limit (Mb) max used (Mb)\nNcells  601967 32.2    1369784 73.2         NA   700242 37.4\nVcells 1112711  8.5    8388608 64.0      16384  1963286 15.0\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nversion\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n               _                           \nplatform       aarch64-apple-darwin20      \narch           aarch64                     \nos             darwin20                    \nsystem         aarch64, darwin20           \nstatus                                     \nmajor          4                           \nminor          4.0                         \nyear           2024                        \nmonth          04                          \nday            24                          \nsvn rev        86474                       \nlanguage       R                           \nversion.string R version 4.4.0 (2024-04-24)\nnickname       Puppy Cup                   \n```\n\n\n:::\n:::\n\n\n\n## Loading useful library\n\nWe want to use as few packages (some might call them \"libraries\") as possible. If possible, I'm going to use only the **tidyverse** package. [Tidyverse](https://www.tidyverse.org) is one of the most famous packages in R programming, and it's really powerful and useful.\n\n\n[sclales](https://scales.r-lib.org) is a popular package in R that helps you convert values easily. It is also compatible with ggplot, which is a great help for visualization.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ purrr::%||%()   masks base::%||%()\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(scales)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'scales'\n\nThe following object is masked from 'package:purrr':\n\n    discard\n\nThe following object is masked from 'package:readr':\n\n    col_factor\n```\n\n\n:::\n:::\n\n\n\n## Select Dataset\n\nWhen I write posts in my blog, I use the built-in dataset because I don't want the reader to suffer by having to find the data from somewhere else.\n\nThe dataset I'll be using in this post is shown below ⬇️ .\n\n<br>\n\n**Michelson Speed of Light Data**\n\n### Description\n\nA classical data of Michelson (but not this one with Morley) on measurements done in 1879 on the speed of light. The data consists of five experiments, each consisting of 20 consecutive ‘runs’. The response is the speed of light measurement, suitably coded (km/sec, with 299000 subtracted).\n\n### Usage\n\nmorley\n\n### Format\n\nA data frame with 100 observations on the following 3 variables.\n\n`Expt`\nThe experiment number, from 1 to 5.\n\n`Run`\nThe run number within each experiment.\n\n`Speed`\nSpeed-of-light measurement.\n\n### Details\n\nThe data is here viewed as a randomized block experiment with ‘experiment’ and ‘run’ as the factors. ‘run’ may also be considered a quantitative variate to account for linear (or polynomial) changes in the measurement over the course of a single experiment.\n\n<br>\n\nall right! ready to go?  \n\nI took a look dataset with `head()` function. actually I used `%>%` pipe operator before, but now I use `|>` pipe operator.\n\nMaybe [stackoverflow article](https://stackoverflow.com/questions/67633022/what-are-the-differences-between-rs-new-native-pipe-and-the-magrittr-pipe) will be helpful to understand both pipe operator.  \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmorley |> head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    Expt Run Speed\n001    1   1   850\n002    1   2   740\n003    1   3   900\n004    1   4  1070\n005    1   5   930\n006    1   6   850\n```\n\n\n:::\n:::\n\n\n\n<br>\n\nI wanna find out `morley` attribute. as you can see, `morley` dataset is data frame object.  \n\nso I don't need to change attribute. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(morley)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"data.frame\"\n```\n\n\n:::\n:::\n\n\n\n<br>\n\nand using `dim()` function, I checked how big `morley` dataset is.  \n\n`morley` is tiny dataset having only 100 rows with 3 column 😁. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndim(morley)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 100   3\n```\n\n\n:::\n:::\n\n\n\n<br>\n\nFirst, group the `morley` dataset by experiment (Expt) using `group_by()` and then use the `summarise()` function to average the speed of light measured in each experiment. \n\nIt then stores the result in the `df1` variable.   \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf1 <- morley |> group_by(Expt) |> summarise(Avg = mean(Speed))\ndf1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 2\n   Expt   Avg\n  <int> <dbl>\n1     1  909 \n2     2  856 \n3     3  845 \n4     4  820.\n5     5  832.\n```\n\n\n:::\n:::\n\n\n\n## Visualization \n\nYou have created a simple bar plot as shown below.  \n\nI can't see any difference between the five experimental results, all of which are above 750 and around 850.  \n\nSince I can't clearly see the difference in the plot, I need to adjust the scale of the y-axis so that I can see the difference between the experimental values.\n\nMoreover, I can't distinguish which bar stand for which experiment because all bar is gray color.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf1 |> \n  ggplot(aes(Expt, Avg)) +\n  geom_col()\n```\n\n::: {.cell-output-display}\n![](nb_002_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n\n<br>\n\nHere you are. \n\nI colored each bar according to the experiment number. One thing to note is that the experiment number is recognized as an integer in the dataset, so if you want to color each one differently, you need to use the `as.factor()` function to make sure it is recognized as a factor and not an integer.  \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf1 |> \n  ggplot(aes(Expt, Avg, fill=as.factor(Expt))) +\n  geom_col()\n```\n\n::: {.cell-output-display}\n![](nb_002_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n\n<br>\n\nA number of color palettes have been developed with the intention of being accessible to people who are colorblind. Three of them appear below, from the [IBM Design Library](https://lospec.com/palette-list/ibm-color-blind-safe), Bang Wong, and Paul Tol respectively. Click on any of them to load it into the color palette selection tool above.\n\n:::callout-note\n**IBM Color Blind Safe Palette**\n\n\"#648fff\", \"#785ef0\", \"#dc267f\", \"#fe6100\", \"#ffb000\", \"#000000\", \"#ffffff\"\n:::\n\nIn my case, I made variable then store color for colorblind.  \n\nIt's a very good practice to have these colors predefined for people with color blindness when creating visualizations. \n\n**I highly recommend it.** Alternatively, [okabe-ito](https://thenode.biologists.com/data-visualization-with-flying-colors/research/#:~:text=Color%20blind%20friendly%20palettes%20Masataka%20Okabe%20and%20Kei,that%20is%20unambiguous%20both%20to%20colorblinds%20and%20non-colorblinds”.) can achieve the same effect and is easy to use by installing the package.\n\nWhen you want to use okabe-ito palette in ggplot, you can use [ggokabeito](https://malcolmbarrett.github.io/ggokabeito/).\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nIBMColor <- c(\"#648fff\", \"#785ef0\", \"#dc267f\", \"#fe6100\", \"#ffb000\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndf1 |> \n  ggplot(aes(Expt, Avg, fill=as.factor(Expt))) +\n  geom_col(show.legend = FALSE) +\n  scale_fill_manual(values = IBMColor)\n```\n\n::: {.cell-output-display}\n![](nb_002_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n\n<br>\n\nNow, I try to zoom the plot to distinguish differences among the experiments. \n\nfor zooming, I set `limits` and `breaks` in `sclae_y_continuous()`. \n\nHowever, I can't see anything 😮. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf1 |> \n  ggplot(aes(Expt, Avg, fill=as.factor(Expt))) +\n  geom_col(show.legend = FALSE) +\n  scale_fill_manual(values = IBMColor) +\n  scale_y_continuous(limits = c(750, 950), breaks = seq(750, 950, 50))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 5 rows containing missing values or values outside the scale range\n(`geom_col()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](nb_002_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n\n<br>\n\nthat because, I didn't set proper coordinate system. \n\nwhen I zoom in or zoom out the plot, I should be careful coordinate system.  \n\nif I set wrong coordinate system, data would clip (remove unseen data points). \n\nIf the purpose is to zoom, use the limit argument in the coordinate system (see [coord_cartesian()](https://ggplot2.tidyverse.org/reference/coord_cartesian.html)).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf1 |> \n  ggplot(aes(Expt, Avg, fill=as.factor(Expt))) +\n  geom_col(show.legend = FALSE) +\n  scale_fill_manual(values = IBMColor) +\n  scale_y_continuous(breaks = seq(750, 950, 50)) +\n  coord_cartesian(ylim = c(750,950))\n```\n\n::: {.cell-output-display}\n![](nb_002_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n\n<br>\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf1 |> \n  ggplot(aes(Expt, Avg, fill=as.factor(Expt))) +\n  geom_col(show.legend = FALSE) +\n  geom_hline(yintercept =  mean(df1$Avg), lty = 3, linewidth = 1, color = \"#000000\") + # native R pipe operator NOT support '.Avg'  \n  scale_fill_manual(values = IBMColor) +\n  scale_y_continuous(breaks = seq(750, 950, 50)) +\n  coord_cartesian(ylim = c(750,950))\n```\n\n::: {.cell-output-display}\n![](nb_002_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n\n<br>\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf1 |> \n  ggplot(aes(Expt, Avg, fill=as.factor(Expt), label = Avg)) +\n  geom_col(show.legend = FALSE) +\n  geom_hline(yintercept =  mean(df1$Avg), lty = 3, linewidth = 1, color = \"#000000\") + # native R pipe operator NOT support '.Avg'  \n  geom_text(vjust = 2.5, fontface = \"bold\", color = \"white\") +\n  annotate(\"text\", x = 4.5, y = 870, label = paste0(\"Average of Light speed is 852.5km/sec\",\"\\n\",\"(with 299,000 subtracted)\")) +\n  scale_fill_manual(values = IBMColor) +\n  scale_y_continuous(breaks = seq(750, 950, 50)) +\n  coord_cartesian(ylim = c(750,950))\n```\n\n::: {.cell-output-display}\n![](nb_002_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n\n<br>\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf1 |> \n  ggplot(aes(Expt, Avg, fill=as.factor(Expt), label = Avg)) +\n  geom_col(show.legend = FALSE) +\n  geom_hline(yintercept =  mean(df1$Avg), lty = 3, linewidth = 1, color = \"#000000\") + # native R pipe operator NOT support '.Avg'  \n  geom_text(vjust = 2.5, fontface = \"bold\", color = \"white\") +\n  annotate(\"text\", x = 4.5, y = 870, label = paste0(\"Average of Light speed is 852.5km/sec\",\"\\n\",\"(with 299,000 subtracted)\")) +\n  scale_fill_manual(values = IBMColor) +\n  scale_y_continuous(breaks = seq(750, 950, 50)) +\n  coord_cartesian(ylim = c(750,950)) +\n  labs(x = \"The experiment number\", y = \"Avg. Speed-of-light (km/s, with -299,000km/s)\", \n       title = \"Michelson Speed of Light Data\",\n       subtitle = paste0(\"A classical data of Michelson (but not this one with Morley) on measurements done\",\"\\n\",\"in 1879 on the speed of light.\")) +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](nb_002_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n\n\n\n<div class=\"right\">\n__END OF POST__\n</div>",
    "supporting": [
      "nb_002_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}