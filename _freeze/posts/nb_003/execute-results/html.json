{
  "hash": "f8808e3cd27b50391af6f33c65306d7d",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Scatter plot with faithful\"\nauthor: \"Sean Ahn\"\ndate: \"2023-08-26\"\ncategories: [ggplot, visualization]\nimage: \"nb_003.png\"\n---\n\n\n\nIn this post, I'll make scatter plot with trend line. Scatter plot display two variables on Cartesian coordinates. \n\nScatter plot is useful and convenient because it can show either continuous variables or discrete variables all.\n\n## Initilizing\n\nI usually use the following code for initialization. If you don't want to remove plots and/or variables, you can skip it.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngraphics.off()\nrm(list = ls())\ngc()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          used (Mb) gc trigger (Mb) limit (Mb) max used (Mb)\nNcells  601970 32.2    1369787 73.2         NA   700254 37.4\nVcells 1111875  8.5    8388608 64.0      16384  1963377 15.0\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nversion\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n               _                           \nplatform       aarch64-apple-darwin20      \narch           aarch64                     \nos             darwin20                    \nsystem         aarch64, darwin20           \nstatus                                     \nmajor          4                           \nminor          4.0                         \nyear           2024                        \nmonth          04                          \nday            24                          \nsvn rev        86474                       \nlanguage       R                           \nversion.string R version 4.4.0 (2024-04-24)\nnickname       Puppy Cup                   \n```\n\n\n:::\n:::\n\n\n\n## Loading Useful Library\n\nWe want to use as few packages (some might call them \"libraries\") as possible. If possible, I'm going to use only the **tidyverse** package. [Tidyverse](https://www.tidyverse.org) is one of the most famous packages in R programming, and it's really powerful and useful.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ purrr::%||%()   masks base::%||%()\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n:::\n\n\n\n## Select Dataset\n\nWhen I write posts in my blog, I use the built-in dataset because I don't want the reader to suffer by having to find the data from somewhere else.\n\nThe dataset I'll be using in this post is shown below ⬇️ .\n\n<br>\n\n**Old Faithful Geyser Data**\n\n### Description\n\nWaiting time between eruptions and the duration of the eruption for the Old Faithful geyser in Yellowstone National Park, Wyoming, USA.\n\n### Usage\n\nfaithful\n\n### Format\n\nA data frame with 272 observations on 2 variables.\n\n[,1]\teruptions\tnumeric\tEruption time in mins\n[,2]\twaiting\tnumeric\tWaiting time to next eruption (in mins)\n\n### Details\n\nA closer look at faithful$eruptions reveals that these are heavily rounded times originally in seconds, where multiples of 5 are more frequent than expected under non-human measurement. For a better version of the eruption times, see the example below.\n\nThere are many versions of this dataset around: Azzalini and Bowman (1990) use a more complete version.\n\n<br>\n\nFirst, let's take a quick look at the contents of the dataset with `head()` function. \n\nI can see there are 2 columns and both data is number which is double type.  \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfaithful |> head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  eruptions waiting\n1     3.600      79\n2     1.800      54\n3     3.333      74\n4     2.283      62\n5     4.533      85\n6     2.883      55\n```\n\n\n:::\n:::\n\n\n\n<br>\n\nand check what type is this dataset with `class()` function.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(faithful)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"data.frame\"\n```\n\n\n:::\n:::\n\n\n\n<br>\n\nthen check how big this dataset is with `dim()` function. \n\n`faithful` dataset has 272 rows and 2 columns. it also very tiny dataset `r emo::ji(\"grin\"). \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndim(faithful)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 272   2\n```\n\n\n:::\n:::\n\n\n\n<br>\n\n`faithful` dataset store into `df` variable to keep original dataset.  \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- faithful\n```\n:::\n\n\n\n## Visualization\n\nYou can use `ggplot()` and `geom_point()` to create a simple scatterplot.  \n\nYou may have noticed that there is a linear trend between the variables 'atmospheric' and 'eruptive'.  \n\nA scatter plot allows you to notice the trend between these two variables at once 👍.  \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |> \n  ggplot(aes(waiting, eruptions)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](nb_003_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n\n<br>\n\nI've coloured it to make the linearity along the x-axis values clear. \n\nFor continuous values, sometimes the colour difference from adjusent values is not significant. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |> \n  ggplot(aes(waiting, eruptions, color = waiting)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](nb_003_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n\n<br>\n\nTo make the linear relationship between the two variables more visible, I used the `cut_number()` function to color the 'waiting' variable in four separate steps.\n\nThis way we can see the value of 'eruptions' for each level. In fact, the points of the 'waiting' variable colored in blue could probably be combined with the points colored in purple, but for the purposes of this post, I'll leave them unmodified.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |> \n  mutate(waitLv = cut_number(waiting, 4)) |> \n  ggplot(aes(waiting, eruptions, color = waitLv)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](nb_003_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n\n<br>\n\nAnyway, I've made a good scatterplot. In addition, I want to add a linear trend equation.   \n\nTo do that, I need to create a linear model with the `lm()` function.  \n\nIt's a pretty powerful 💪 R function.  \n\nI can create a linear model using just the simple `lm()` function.   \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate slope and intercept of line of best fit\nlinear <- lm(eruptions ~ waiting, data = faithful)\nlinear\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = eruptions ~ waiting, data = faithful)\n\nCoefficients:\n(Intercept)      waiting  \n   -1.87402      0.07563  \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlinear$coefficients[1]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n(Intercept) \n  -1.874016 \n```\n\n\n:::\n\n```{.r .cell-code}\ni <- linear$coefficients[1]\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlinear$coefficients[2]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   waiting \n0.07562795 \n```\n\n\n:::\n\n```{.r .cell-code}\ns <- linear$coefficients[2]\n```\n:::\n\n\n\n<br>\n\nWe got the coefficient value as a result of `lm()`. \n\nI can see that the slope of the trend line I'm plotting is 0.0756279`, and the intercept is `linear$coefficients[1]`.   \n\nIt then draws a trend line on the plot with the slope and intercept values.\n\n`geom_abline()` draws a line with specific slope and intercept values as shown below.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |> \n  mutate(waitLv = cut_number(waiting, 4)) |> \n  ggplot(aes(waiting, eruptions, color = waitLv)) +\n  geom_point() +\n  geom_abline(intercept = i, slope = s)\n```\n\n::: {.cell-output-display}\n![](nb_003_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n\n<br>\n\nIf I use `geom_smooth()` to represent a confidence interval (se = TRUE), I can draw a trend line at once without having to find the slope and intercept values outside.  \n\nHowever, even with `geom_smooth()`, I still need to know the slope and intercept to plot the trend equations, which can be redundant. \n\nIt is users' choice to use `geom_smooth()` or `geom_abline()`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |> \n  mutate(waitLv = cut_number(waiting, 4)) |> \n  ggplot(aes(waiting, eruptions)) + # Should remove \"aes(color = waitLv)\" in ggplot()\n  geom_point(aes(color = waitLv)) +\n  geom_smooth(method = lm ,se = TRUE, color = \"black\", linewidth = 0.5) # BUT!! to extract equation you should using \"lm()\"\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](nb_003_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n\n<br>\n\nI put equation in plot with `annotate()` at proper location. and title, subtitle, name of x-axis and y-axis also display with `lab()`.  \n\nFinally I got plot as below.  \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |> \n  mutate(waitLv = cut_number(waiting, 4)) |> \n  ggplot(aes(waiting, eruptions, color = waitLv)) +\n  geom_point() +\n  geom_abline(intercept = i, slope = s, color = \"blue\", lty = 2) +\n  annotate(\"text\",x = 50, y = 4.5, label = paste0(\"y = \", round(s,5) ,\"x +\",round(i,5))) +\n  labs(title = \"Old Faithful geyser\",\n       subtitle = paste0(\"Waiting time between eruptions and the duration of the eruption for the Old Faithful geyser\",\"\\n\",\n                         \"in Yellowstone National Park, Wyoming, USA.\"),\n       x = \"Waiting time to next eruption (min)\", y = \"Eruption time (min)\", color = \"Lv. of Wating Time\") +\n  theme_bw() +\n  theme(legend.position = \"bottom\")\n```\n\n::: {.cell-output-display}\n![](nb_003_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n\n<br>\n\ngood luck! 👍\n\n\n\n\n\n\n\n\n\n<div class=\"right\">\n__END OF POST__\n</div>",
    "supporting": [
      "nb_003_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}