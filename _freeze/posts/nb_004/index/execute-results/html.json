{
  "hash": "cc65e6503d51ad447d4a411456c53968",
  "result": {
    "markdown": "---\ntitle: \"Area plot with Nile\"\nauthor: \"Sean Ahn\"\ndate: \"2023-08-26\"\ncategories: [ggplot, visualization]\nimage: \"image.png\"\n---\n\n\nIn this post, I'll talk area plot with Nile dataset. as you know, Nile is one of the famous time series dataset.   \nsometimes, time series dataset is hard to give message to reader.   \nTo overcome it, I often use area plot as followings;  \n\n## Initializing\n\nI usually use the following code for initialization. If you don't want to remove plots and/or variables, you can skip it.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngraphics.off()\nrm(list = ls())\ngc()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n          used (Mb) gc trigger (Mb) limit (Mb) max used (Mb)\nNcells  578472 30.9    1318140 70.4         NA   669274 35.8\nVcells 1057767  8.1    8388608 64.0      16384  1851504 14.2\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nversion\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n               _                           \nplatform       aarch64-apple-darwin20      \narch           aarch64                     \nos             darwin20                    \nsystem         aarch64, darwin20           \nstatus                                     \nmajor          4                           \nminor          3.1                         \nyear           2023                        \nmonth          06                          \nday            16                          \nsvn rev        84548                       \nlanguage       R                           \nversion.string R version 4.3.1 (2023-06-16)\nnickname       Beagle Scouts               \n```\n:::\n:::\n\n\n## Loading Useful Library\n\nWe want to use as few packages (some might call them \"libraries\") as possible. If possible, I'm going to use only the **tidyverse** package. [Tidyverse](https://www.tidyverse.org) is one of the most famous packages in R programming, and it's really powerful and useful.\n\nMoreover, I loaded [tsibble](https://tsibble.tidyverts.org) package. `tsibble` is the package to wrangle a time series dataset.   \n`tsibble` is also the one of tidyverse eco-system.   \nIf you need to handle time series dataset with `tidyverse` package, `tsibble` definitely is a good choice.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n\n```{.r .cell-code}\nlibrary(tsibble)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'tsibble'\n\nThe following object is masked from 'package:lubridate':\n\n    interval\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, union\n```\n:::\n:::\n\n\n## Select Dataset\n\nWhen I write posts in my blog, I use the built-in dataset because I don't want the reader to suffer by having to find the data from somewhere else.\n\nThe dataset I'll be using in this post is shown below ⬇️ .\n\n<br>\n\n**Flow of the River Nile**\n\n### Description\n\nMeasurements of the annual flow of the river Nile at Aswan (formerly Assuan), 1871–1970, in 10^8 m^3, “with apparent changepoint near 1898” (Cobb(1978), Table 1, p.249).\n\n### Usage\n\nNile\n\n### Format\n\nA time series of length 100.\n\n### Source\n\nDurbin, J. and Koopman, S. J. (2001). Time Series Analysis by State Space Methods. Oxford University Press. http://www.ssfpack.com/DKbook.html\n\n<br>\n\nAll rigth! Take a look the dataset.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nNile\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTime Series:\nStart = 1871 \nEnd = 1970 \nFrequency = 1 \n  [1] 1120 1160  963 1210 1160 1160  813 1230 1370 1140  995  935 1110  994 1020\n [16]  960 1180  799  958 1140 1100 1210 1150 1250 1260 1220 1030 1100  774  840\n [31]  874  694  940  833  701  916  692 1020 1050  969  831  726  456  824  702\n [46] 1120 1100  832  764  821  768  845  864  862  698  845  744  796 1040  759\n [61]  781  865  845  944  984  897  822 1010  771  676  649  846  812  742  801\n [76] 1040  860  874  848  890  744  749  838 1050  918  986  797  923  975  815\n [91] 1020  906  901 1170  912  746  919  718  714  740\n```\n:::\n:::\n\n\n<br>\n\nI got `ts` object which means time series dataset. `ts` is a vector or matrix of the observed time-series values. And this has observation time(start, end) and the number of observations per unit of time(frequency).  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(Nile)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"ts\"\n```\n:::\n:::\n\n\n<br>\n\nI'll manipulate Nile dataset with tidyverse eco-system, so I convert ts object to tsibble object. tsibble object is form of dataframe. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n#coerce ts to tsibble\ndf <- as_tsibble(Nile)\ndf |> head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tsibble: 6 x 2 [1Y]\n  index value\n  <dbl> <dbl>\n1  1871  1120\n2  1872  1160\n3  1873   963\n4  1874  1210\n5  1875  1160\n6  1876  1160\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"tbl_ts\"     \"tbl_df\"     \"tbl\"        \"data.frame\"\n```\n:::\n:::\n\n\n<br>\n\nthen, check how big Nile dataset. it has 100 rows and 2 column. very tiny.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\ndim(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 100   2\n```\n:::\n:::\n\n\n<br>\n\nName the columns \"Years\" for the first column and \"Flows\" for the second column.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(df) <- c(\"year\", \"flow\")\ndf |> head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tsibble: 6 x 2 [1Y]\n   year  flow\n  <dbl> <dbl>\n1  1871  1120\n2  1872  1160\n3  1873   963\n4  1874  1210\n5  1875  1160\n6  1876  1160\n```\n:::\n:::\n\n\n<br>\n\nNow you've created a simple line plot with ggplot. But while a simple line plot can show variation, it doesn't convey a message.\n\nReaders can see that somewhere after 1875, the flow of the Nile must have dropped sharply and then increased sharply the following year. They can also see that around 1912, the flow of the Nile was the lowest we've ever measured.\n\nAnd it looks like the flow in the first half of the measured data is higher than the flow in the second half.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |> \n  ggplot(aes(year, flow)) +\n  geom_line()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n<br>\n\nI want to divide the Nile flow into two periods (first half, second half) and compare the flows, while also capturing one of the most important elements of time series data: change from before in one plot.  \n\nTo do this, I've create two more column with `mutate()` function. The `grp` column will distinguish whether first half or second half.   \nAnd the `lag` column will store the difference from the previous year.   \n\n:::callout-note\nWith the availability of the `tidyverse` ecosystem, you can easily manipulate the shape of your data using functions like `mutate`.   \nFor this reason, it is convenient to use time series data in `tsibble` objects.\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf1 <- \n  df |> \n  mutate(grp = cut_number(year, 2, labels = FALSE), \n         lag = difference(flow, default = 0))\ndf1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tsibble: 100 x 4 [1Y]\n    year  flow   grp   lag\n   <dbl> <dbl> <int> <dbl>\n 1  1871  1120     1     0\n 2  1872  1160     1    40\n 3  1873   963     1  -197\n 4  1874  1210     1   247\n 5  1875  1160     1   -50\n 6  1876  1160     1     0\n 7  1877   813     1  -347\n 8  1878  1230     1   417\n 9  1879  1370     1   140\n10  1880  1140     1  -230\n# ℹ 90 more rows\n```\n:::\n:::\n\n\n## Visualization  \n\nI got area plot with `df1` dataset. \n\n`flow` colored midnight blue and `lag` colored orange place in one plot.  \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf1 |> \n  ggplot(aes(year)) +\n  geom_area(aes(y = flow), fill = \"midnightblue\") +\n  geom_area(aes(y = lag), fill = \"orange\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n<br>\n\nTo make it easier to understand, I've divided it into two parts, the first half and the second half. I then use the `facet_wrap()` function to place the first 50 years on top and the second 50 years on the bottom.\n\nTo make it easier to distinguish between the first and second halves, I created a `grp` column when manipulating the data, assigning a value of 1 to data in the first half and a value of 2 to data in the second half.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf1 |> \n  ggplot(aes(year)) +\n  geom_area(aes(y = flow), fill = \"midnightblue\") +\n  geom_area(aes(y = lag), fill = \"orange\") +\n  facet_wrap(vars(grp), ncol = 1)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n<br>\n\nI've used the `facet_wrap()` function to divide the first half and second half, but the labels are difficult to understand because they take the data values as they are.  Maybe lots of readers can not notice \"1\" means first half. \n\nTherefore, to change the labels to make the graph easier to understand, we have used `labeller()` like below.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\ngrp_status <- c( \"1\" = \"First 50years\", \"2\" = \"Second 50years\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndf1 |> \n  ggplot(aes(year)) +\n  geom_area(aes(y = flow), fill = \"midnightblue\") +\n  geom_area(aes(y = lag), fill = \"orange\") +\n  facet_wrap(vars(grp), ncol = 1, scale = \"free_x\", labeller = labeller(grp = grp_status))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n<br>\n\nI've put legend to understand what each colored area means. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf1 |> \n  ggplot(aes(year)) +\n  geom_area(aes(y = flow, fill = \"Flow\")) +\n  geom_area(aes(y = lag, fill = \"Lag\")) +\n  facet_wrap(vars(grp), ncol = 1, scale = \"free_x\", labeller = labeller(grp = grp_status)) +\n  scale_fill_manual(name = \"Legend\", values = c(\"Flow\" = \"midnightblue\", \"Lag\" = \"orange\"))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n<br>\n\nThe first 50 years of the 100-year period saw more change, while the second 50 years saw less change.  \n\nAnd by looking at the `lag` area, colored orange, readers can also see when there was a large change in flow.  \n\nAt the end of this process, I get a plot like the one below. It can easily convey more information compared to a simple line plot.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf1 |> \n  ggplot(aes(year)) +\n  geom_area(aes(y = flow, fill = \"Flow\")) +\n  geom_area(aes(y = lag, fill = \"Lag\")) +\n  facet_wrap(vars(grp), ncol = 1, scale = \"free_x\", labeller = labeller(grp = grp_status)) +\n  scale_fill_manual(name = \"Legend\", values = c(\"Flow\" = \"midnightblue\", \"Lag\" = \"orange\")) +\n  labs(title = \"Flow of the River Nile\", \n       subtitle = paste0(\"Measurements of the annual flow of the river Nile at Aswan (formerly Assuan), 1871–1970,\",\"\\n\" ,\"in 10^8 m^3\"),\n       x = \"Year\", y = \"Flow (10^8 cu.m)\") +\n  theme_bw() + theme(legend.position = \"bottom\", \n                     legend.box.background = element_rect(colour = \"black\"))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n\n\n<div class=\"right\">\n__END OF POST__\n</div>",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}