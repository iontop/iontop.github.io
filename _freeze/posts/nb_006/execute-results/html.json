{
  "hash": "7003989c64ef9e8e9291b105d2dde471",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Line plot with CO2\"\nauthor: \"Sean Ahn\"\ndate: \"2023-08-26\"\ncategories: [ggplot, visualization]\nimage: \"nb_006.png\"\n---\n\n\n\nIn this blog post, I made line plot with CO2 dataset. CO2 dataset is [groupedData](https://www.rdocumentation.org/packages/nlme/versions/3.1-163/topics/groupedData). It's very useful object when you make complicated dataset with formula.\n\n## Initializing\n\nI usually use the following code for initialization. If you don't want to remove plots and/or variables, you can skip it.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngraphics.off()\nrm(list = ls())\ngc()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          used (Mb) gc trigger (Mb) limit (Mb) max used (Mb)\nNcells  602023 32.2    1369938 73.2         NA   700254 37.4\nVcells 1113877  8.5    8388608 64.0      16384  1963377 15.0\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nversion\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n               _                           \nplatform       aarch64-apple-darwin20      \narch           aarch64                     \nos             darwin20                    \nsystem         aarch64, darwin20           \nstatus                                     \nmajor          4                           \nminor          4.0                         \nyear           2024                        \nmonth          04                          \nday            24                          \nsvn rev        86474                       \nlanguage       R                           \nversion.string R version 4.4.0 (2024-04-24)\nnickname       Puppy Cup                   \n```\n\n\n:::\n:::\n\n\n\n## Loading Useful Library\n\nWe want to use as few packages (some might call them \"libraries\") as possible. If possible, I'm going to use only the **tidyverse** package. [Tidyverse](https://www.tidyverse.org) is one of the most famous packages in R programming, and it's really powerful and useful.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ purrr::%||%()   masks base::%||%()\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n:::\n\n\n\n## Select Dataset\n\nWhen I write posts in my blog, I use the built-in dataset because I don't want the reader to suffer by having to find the data from somewhere else.\n\nThe dataset I'll be using in this post is shown below ⬇️ .\n\n<br>\n\n**Carbon Dioxide Uptake in Grass Plants**\n\n### Description\nThe CO2 data frame has 84 rows and 5 columns of data from an experiment on the cold tolerance of the grass species Echinochloa crus-galli.\n\n### Usage\nCO2\n\n### Format\nAn object of class c(\"nfnGroupedData\", \"nfGroupedData\", \"groupedData\", \"data.frame\") containing the following columns:\n\nPlant\nan ordered factor with levels Qn1 < Qn2 < Qn3 < ... < Mc1 giving a unique identifier for each plant.\n\nType\na factor with levels Quebec Mississippi giving the origin of the plant\n\nTreatment\na factor with levels nonchilled chilled\n\nconc\na numeric vector of ambient carbon dioxide concentrations (mL/L).\n\nuptake\na numeric vector of carbon dioxide uptake rates ($\\mu$mol/$m^2$sec).\n\n### Details\nThe $CO_2$ uptake of six plants from Quebec and six plants from Mississippi was measured at several levels of ambient $CO_2$ concentration. Half the plants of each type were chilled overnight before the experiment was conducted.\n\nThis dataset was originally part of package nlme, and that has methods (including for [, as.data.frame, plot and print) for its grouped-data classes.\n\nTake a look the CO2 dataset.  \n\nAs I said before, CO2 is groupedData (also dataframe). so its description show **nfnGrpdD**. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nCO2 |> head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  Plant   Type  Treatment conc uptake\n1   Qn1 Quebec nonchilled   95   16.0\n2   Qn1 Quebec nonchilled  175   30.4\n3   Qn1 Quebec nonchilled  250   34.8\n4   Qn1 Quebec nonchilled  350   37.2\n5   Qn1 Quebec nonchilled  500   35.3\n6   Qn1 Quebec nonchilled  675   39.2\n```\n\n\n:::\n:::\n\n\n\nCO2 dataset has several attributes as followings;  \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nCO2 |> class()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"nfnGroupedData\" \"nfGroupedData\"  \"groupedData\"    \"data.frame\"    \n```\n\n\n:::\n:::\n\n\n\nand CO2 is 84 rows and 5 columns. it very tiny.  \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nCO2 |> dim()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 84  5\n```\n\n\n:::\n:::\n\n\n\n## Visualization\n\nbefore make plot, I'd like to know how many kind of Plant in CO2.\n\nif there are too many kind of Plant, I can't make plots at once. It might be too hard to read even I made plot.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nunique(CO2[,1:3])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Plant        Type  Treatment\n1    Qn1      Quebec nonchilled\n8    Qn2      Quebec nonchilled\n15   Qn3      Quebec nonchilled\n22   Qc1      Quebec    chilled\n29   Qc2      Quebec    chilled\n36   Qc3      Quebec    chilled\n43   Mn1 Mississippi nonchilled\n50   Mn2 Mississippi nonchilled\n57   Mn3 Mississippi nonchilled\n64   Mc1 Mississippi    chilled\n71   Mc2 Mississippi    chilled\n78   Mc3 Mississippi    chilled\n```\n\n\n:::\n:::\n\n\n\nGreat! There are 12 types of plants in total.  \n\nThis is the essential information I need to know to plot ahead.\n\nIf I plot with `plot()` function, it will appear like below.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(formula = uptake ~ conc,\n     data = CO2,\n     type = \"p\", \n     main = \"Carbon Dioxide Uptake in Grass Plants\")\n```\n\n::: {.cell-output-display}\n![](nb_006_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n\nOf course, it is also possible to draw a plot classified by Plant using only the native functions, as shown in the steps below.\n\nHowever, using ggplot2 is a much simpler and faster way to create beautiful plot.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Split the dataset by the \"Plant\" factor\nsplit_data <- split(CO2, CO2$Plant)\n\n# Set the number of rows and columns in the grid\nnum_rows <- 3\nnum_cols <- 4\n\n# Create separate scatterplots for each plant\npar(mfrow = c(num_rows, num_cols))\n\n# Get the names of the plants\nplant_names <- names(split_data)\n\n# Loop through each plant and create a scatterplot\nfor (i in 1:min(length(plant_names), num_rows * num_cols)) {\n  plant_data <- split_data[[plant_names[i]]]\n  \n  # Create the scatterplot with points and lines connecting them\n  plot(uptake ~ conc, data = plant_data, \n       main = plant_names[i],\n       xlab = \"Concentration\", ylab = \"CO2 Uptake\",\n       col = \"blue\", pch = 16)  # pch = 16 specifies point shape\n  \n  lines(uptake ~ conc, data = plant_data, col = \"blue\")  # Add lines connecting points\n  grid() # Add grid each plot\n}\n\n# Add the common plot title at the top of the entire grid\nmtext(\"Carbon Dioxide Uptake in Grass Plants\", side = 3, line = -1.5, outer = TRUE, cex = 1.2)\n```\n\n::: {.cell-output-display}\n![](nb_006_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# Reset the plotting parameters\npar(mfrow = c(1, 1))\n```\n:::\n\n\n\nNow, I start to make plot with ggplot! 📈 \n\nthis is very simple dot plot. almost same as result of `base::plot()`. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nCO2 |> \n  ggplot(aes(conc, uptake)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](nb_006_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n\nTo make it easier for readers to understand, I drew a plot for each of the 12 plant species with lines connecting the dots.  \n\nIt's easier to understand than the previous plot, but I still see areas for improvement.  \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nCO2 |> \n  ggplot(aes(conc, uptake)) +\n  geom_path() +\n  geom_point(shape = 21, fill = \"white\", color = \"black\") +\n  facet_wrap(vars(Plant), nrow = 1)\n```\n\n::: {.cell-output-display}\n![](nb_006_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n\nI created the **first plot** below to give the reader an idea of what to expect. The plots for each of the 12 plants are arranged side-by-side and have the same y scale to make them easier to compare.  \n\nThe label values on the x-axis were rotated 90 degrees to avoid overlapping letters, making it easier for readers to read the numbers.   \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nCO2 |> \n  ggplot(aes(conc, uptake, color = Plant)) +\n  geom_path(show.legend = FALSE) +\n  geom_point(aes(color = Plant), shape = 21, fill = \"white\", show.legend = FALSE) +\n  facet_wrap(vars(Plant), nrow = 1) +\n  scale_x_continuous(limits = c(0,1200), breaks = seq(0,1200,400)) +\n  labs(title = \"Carbon Dioxide Uptake in Grass Plants\",\n       subtitle = paste0(\"The CO2 data frame has 84 rows and 5 columns of data from an experiment on the cold tolerance\",\"\\n\" ,\n                         \"of the grass species Echinochloa crus-galli.\"),\n       x = \"Ambient carbon dioxide concentrations (mL/L)\",\n       y = \"Carbon dioxide uptake rates (umol/sq.m sec)\",\n       color = \"Legend\") +\n  theme_bw() +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))\n```\n\n::: {.cell-output-display}\n![](nb_006_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n\n\nThis time, I plotted a different version of line plot. This plot is a useful way to show a specific value in a [spaghetti plot](https://graphics.cs.wisc.edu/WP/vis17/2017/10/17/design-challenge-2-spaghetti-plots/) with a lot of data jumbled together.  \n\nThe package [gghighlight](https://yutannihilation.github.io/gghighlight/articles/gghighlight.html) makes it very easy to do this 👍, but I sometimes use the above method of plotting using `ggplot`'s layers instead of using the `gghighlight` package.   \n\nThe key to plotting with `ggplot`'s layer method is to use the `subset()` function. This is a very useful tip because it allows you to highlight one or more graphs.  \n\nBoth methods are great, so it's a matter of preference.  \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nCO2 |> \n  ggplot(aes(conc, uptake, group = Plant, label = Plant)) +\n  # path color sets by color name then determine color in scale_color_manual()\n  geom_path(data = subset(CO2, Plant != \"Mn1\"), aes(color = \"Others\"), linewidth = 1, lty = 2) +\n  geom_path(data = subset(CO2, Plant == \"Mn1\"), aes(color = \"Mn1\"), linewidth = 1, lty = 1) +\n  # point color determines in geom_point() directly\n  geom_point(data = subset(CO2, Plant != \"Mn1\"), shape = 21, fill = \"white\", color = \"gray\") +\n  geom_point(data = subset(CO2, Plant == \"Mn1\"), shape = 21, fill = \"white\", color = \"coral\") +\n  scale_color_manual(values = c(\"Others\" = \"gray80\",\"Mn1\" = \"coral\")) +\n  labs(title = \"Carbon Dioxide Uptake in Grass Plants\",\n       subtitle = paste0(\"The CO2 data frame has 84 rows and 5 columns of data from an experiment on the cold tolerance\",\"\\n\" ,\n                         \"of the grass species Echinochloa crus-galli.\"),\n       x = \"Ambient carbon dioxide concentrations (mL/L)\",\n       y = \"Carbon dioxide uptake rates (umol/sq.m sec)\",\n       color = \"Legend\") +\n  theme_bw() + \n  theme(legend.position = c(0.9, 0.15), # Caution!!! it is relative position ex) 0: left end ~ 1: right end\n        legend.background = element_rect(fill = \"white\"),\n        legend.box.background = element_rect(color = \"black\"))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: A numeric `legend.position` argument in `theme()` was deprecated in ggplot2\n3.5.0.\nℹ Please use the `legend.position.inside` argument of `theme()` instead.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](nb_006_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n\nThis time, we want to plot the classification of plants according to their macroclassification (Mc, Mn, Qc, Qn).  \n\nTo do this, we first create a column called category using the mutate() function and put in the values that define the major classifications of plants.  \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- \n  CO2 |> \n  mutate(category = case_when(str_detect(Plant, \"Qn\") ~ \"Qn\",\n                              str_detect(Plant, \"Qc\") ~ \"Qc\",\n                              str_detect(Plant, \"Mn\") ~ \"Mn\",\n                              str_detect(Plant, \"Mc\") ~ \"Mc\",\n                              .default = \"Unknown\"))\ndf |> head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  Plant   Type  Treatment conc uptake category\n1   Qn1 Quebec nonchilled   95   16.0       Qn\n2   Qn1 Quebec nonchilled  175   30.4       Qn\n3   Qn1 Quebec nonchilled  250   34.8       Qn\n4   Qn1 Quebec nonchilled  350   37.2       Qn\n5   Qn1 Quebec nonchilled  500   35.3       Qn\n6   Qn1 Quebec nonchilled  675   39.2       Qn\n```\n\n\n:::\n:::\n\n\n\nI have colored them according to the Plant category because if we colored them according to the Plant taxonomy, they would be indistinguishable.  \n\nThe rest of the plot is the same as the previous plot.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |> \n  ggplot(aes(conc, uptake, color = Plant)) +\n  geom_path(show.legend = FALSE) +\n  geom_point(aes(color = Plant), shape = 21, fill = \"white\", show.legend = FALSE) +\n  facet_wrap(vars(category), nrow = 1) +\n  labs(title = \"Carbon Dioxide Uptake in Grass Plants\",\n       subtitle = paste0(\"The CO2 data frame has 84 rows and 5 columns of data from an experiment on the cold tolerance\",\"\\n\" ,\n                         \"of the grass species Echinochloa crus-galli.\"),\n       x = \"Ambient carbon dioxide concentrations (mL/L)\",\n       y = \"Carbon dioxide uptake rates (umol/sq.m sec)\",\n       color = \"Legend\") +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](nb_006_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n\nWhen plotting as above, it is sometimes uncomfortable to see a lot of items in the legend.  \n\nOr, you may want to show each piece of data in a single plot.  \n\nIn either case, the solution is to break it down into smaller plots with appropriate zones. Like the one I created earlier with the native `plot()` function, I can display 12 small plots in a 4X3 array as shown below, and you can see that the code has become very simple and straightforward.  \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |> \n  ggplot(aes(conc, uptake, color = Plant)) +\n  geom_path(show.legend = FALSE) +\n  geom_point(aes(color = Plant), shape = 21, fill = \"white\", show.legend = FALSE) +\n  facet_wrap(vars(category, Plant), ncol = 4, dir = \"v\", labeller = labeller(.multi_line = FALSE)) +\n  labs(title = \"Carbon Dioxide Uptake in Grass Plants\",\n       subtitle = paste0(\"The CO2 data frame has 84 rows and 5 columns of data from an experiment on the cold tolerance\",\"\\n\" ,\n                         \"of the grass species Echinochloa crus-galli.\"),\n       x = \"Ambient carbon dioxide concentrations (mL/L)\",\n       y = \"Carbon dioxide uptake rates (umol/sq.m sec)\",\n       color = \"Legend\") +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](nb_006_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n\nI've plotted four different line plots in this blog post, which can be broadly divided into two categories.   \n\nLine plots are likely to look cluttered when plotted on a single plot, so it's important to keep them as simple as possible.  \n\n\n\n\n\n\n\n<div class=\"right\">\n__END OF POST__\n</div>\n",
    "supporting": [
      "nb_006_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}