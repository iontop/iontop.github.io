{
  "hash": "0bfabb2371fce23091ef12d8b61bddca",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Column plot with World's Telephones\"\nauthor: \"Sean Ahn\"\ndate: \"2023-10-01\"\ncategories: [ggplot, visualization]\nimage: \"nb_007.png\"\n---\n\n\n\nIn this blog post, I'm going to make a simple column plot. A characteristic feature is that the values in the data have a large variance, which makes it difficult to compare them to each other. `ggplot` has a `facet_wrap()` function (or `facet_grid()`) for this purpose. \n\nIn fact, a [tile plot](https://informationisbeautiful.net/visualizations/the-billion-dollar-gram/) would be more appropriate in this case, but to keep the example as simple as possible, I'll plot without any data manipulation.\n\n## Initializing\n\nI usually use the following code for initialization. If you don't want to remove plots and/or variables, you can skip it.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngraphics.off()\nrm(list = ls())\ngc()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          used (Mb) gc trigger (Mb) limit (Mb) max used (Mb)\nNcells  602062 32.2    1370050 73.2         NA   700254 37.4\nVcells 1112143  8.5    8388608 64.0      16384  1963377 15.0\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nversion\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n               _                           \nplatform       aarch64-apple-darwin20      \narch           aarch64                     \nos             darwin20                    \nsystem         aarch64, darwin20           \nstatus                                     \nmajor          4                           \nminor          4.0                         \nyear           2024                        \nmonth          04                          \nday            24                          \nsvn rev        86474                       \nlanguage       R                           \nversion.string R version 4.4.0 (2024-04-24)\nnickname       Puppy Cup                   \n```\n\n\n:::\n:::\n\n\n\n## Loading Useful Library\n\nWe want to use as few packages (some might call them \"libraries\") as possible. If possible, I'm going to use only the **tidyverse** package. [Tidyverse](https://www.tidyverse.org) is one of the most famous packages in R programming, and it's really powerful and useful.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ purrr::%||%()   masks base::%||%()\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n:::\n\n\n\n## Select Dataset\n\nWhen I write posts in my blog, I use the built-in dataset because I don't want the reader to suffer by having to find the data from somewhere else.\n\nThe dataset I'll be using in this post is shown below ⬇️ ⬇️ ⬇️.\n\n<br>\n\n**The World's Telephones** \n\nDescription\nThe number of telephones in various regions of the world (in thousands)\n\nUsage\nWorldPhones\n\nFormat\nA matrix with 7 rows and 8 columns. The columns of the matrix give the figures for a given region, and the rows the figures for a year.\n\nThe regions are: North America, Europe, Asia, South America, Oceania, Africa, Central America.\n\nThe years are: 1951, 1956, 1957, 1958, 1959, 1960, 1961.\n\nSource\nAT&T (1961) The World's Telephones.\n\nReferences\nMcNeil, D. R. (1977) Interactive Data Analysis. New York: Wiley.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nWorldPhones |> head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     N.Amer Europe Asia S.Amer Oceania Africa Mid.Amer\n1951  45939  21574 2876   1815    1646     89      555\n1956  60423  29990 4708   2568    2366   1411      733\n1957  64721  32510 5230   2695    2526   1546      773\n1958  68484  35218 6662   2845    2691   1663      836\n1959  71799  37598 6856   3000    2868   1769      911\n1960  76036  40341 8220   3145    3054   1905     1008\n```\n\n\n:::\n:::\n\n\n\nWorldPhones dataset has several attributes as followings;  \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nWorldPhones |> class()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"matrix\" \"array\" \n```\n\n\n:::\n:::\n\n\n\nand WorldPhones is 7 rows and 7 columns. it super tiny.  \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nWorldPhones |> dim()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 7 7\n```\n\n\n:::\n:::\n\n\n\n## Visualization\n\noops, `autoplot` in `ggplot` does not support *matrix* object. there is lots of way to plot the matrix data.  \n\nbut I want to use `ggplot` and `tidyverse` eco-system, so I'll convert matrix to dataframe.  \n\nit's quite easy. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_base <- as.data.frame(WorldPhones)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(df_base)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     N.Amer Europe Asia S.Amer Oceania Africa Mid.Amer\n1951  45939  21574 2876   1815    1646     89      555\n1956  60423  29990 4708   2568    2366   1411      733\n1957  64721  32510 5230   2695    2526   1546      773\n1958  68484  35218 6662   2845    2691   1663      836\n1959  71799  37598 6856   3000    2868   1769      911\n1960  76036  40341 8220   3145    3054   1905     1008\n```\n\n\n:::\n:::\n\n\n\nor I can use `as_tibble()` function. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_dplyr <- as_tibble(WorldPhones, rownames = \"Year\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(df_dplyr)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 8\n  Year  N.Amer Europe  Asia S.Amer Oceania Africa Mid.Amer\n  <chr>  <dbl>  <dbl> <dbl>  <dbl>   <dbl>  <dbl>    <dbl>\n1 1951   45939  21574  2876   1815    1646     89      555\n2 1956   60423  29990  4708   2568    2366   1411      733\n3 1957   64721  32510  5230   2695    2526   1546      773\n4 1958   68484  35218  6662   2845    2691   1663      836\n5 1959   71799  37598  6856   3000    2868   1769      911\n6 1960   76036  40341  8220   3145    3054   1905     1008\n```\n\n\n:::\n:::\n\n\n\nboth data frame looks very similar. but there is quite differences between them.  \n\ntake a look dimension of data frame.  \n\nas you can see, data frame which generate with `as.data.frame()` is smaller than `dplyr` data frame.  \n\nWHY ❓ \n\ntypically, 1st column of matrix role as *name of rows*.  when I convert matrix to data frame with `as.data.frame`, *name of rows* can not include as part of data frame.  \n\nsometimes, we need this data set should include part of data frame.   \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndim(df_base)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 7 7\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndim(df_dplyr)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 7 8\n```\n\n\n:::\n:::\n\n\n\nFor the purposes of this post, it is desirable that these rows are recorded as the first row of the data frame because their names refer to the year in which each piece of data was acquired.\n\nAnyway, I'll use data frame which generate with `as_tibble()` from here.  \n\n`Year` column is character type so I can change it to numeric type if I need. \n\nSometimes you need to assign `date` or `date_time` type on it depends on what will you do.  \n\nbut in this blog post, I think it's not necessary so I just keep it as a character type.  \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# df_dplyr <- df_dplyr |> mutate(Year = (as.integer(Year))) # if you want to it makes integer type.\n\ndf_dplyr\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 7 × 8\n  Year  N.Amer Europe  Asia S.Amer Oceania Africa Mid.Amer\n  <chr>  <dbl>  <dbl> <dbl>  <dbl>   <dbl>  <dbl>    <dbl>\n1 1951   45939  21574  2876   1815    1646     89      555\n2 1956   60423  29990  4708   2568    2366   1411      733\n3 1957   64721  32510  5230   2695    2526   1546      773\n4 1958   68484  35218  6662   2845    2691   1663      836\n5 1959   71799  37598  6856   3000    2868   1769      911\n6 1960   76036  40341  8220   3145    3054   1905     1008\n7 1961   79831  43173  9053   3338    3224   2005     1076\n```\n\n\n:::\n:::\n\n\n\n\nI'm going to plot the telephone supply in each continent by year, but the current data format makes it difficult to create the desired plot.\n\nso I transform data format with `pivot_longer()` function. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- pivot_longer(df_dplyr, 2:last_col(), names_to = \"Region\", values_to = \"Numbers\")\n\nhead(df,10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 × 3\n   Year  Region   Numbers\n   <chr> <chr>      <dbl>\n 1 1951  N.Amer     45939\n 2 1951  Europe     21574\n 3 1951  Asia        2876\n 4 1951  S.Amer      1815\n 5 1951  Oceania     1646\n 6 1951  Africa        89\n 7 1951  Mid.Amer     555\n 8 1956  N.Amer     60423\n 9 1956  Europe     29990\n10 1956  Asia        4708\n```\n\n\n:::\n:::\n\n\n\nmuch better! 👍  \n\ntry to make a simple line plot.  \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |> \n  ggplot(aes(Year, Numbers, fill = Region)) + \n  geom_col()\n```\n\n::: {.cell-output-display}\n![](nb_007_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n\nor...\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |> \n  ggplot(aes(Year, Numbers, fill = Region)) + \n  geom_col(position = \"dodge\")\n```\n\n::: {.cell-output-display}\n![](nb_007_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n\nThere are some problems to read a line plot. first of all some of data values are too small (or too big), it's difficult to show change of data properly. \n\nTypically, we manipulate data value before make plots depends on what you want to give message to readers. **\"standardization\"** or **\"normalization\"** is one of good example if you want to show change of values by year. **\"logarithm\"** also good method to show very large number and relatively small number simultaneously on the same plot. \n\nYou can search them and what they do. If you have statistic background, you can make better plot. \n\nI'm going to create the plot in a simple way: I want to show the reader that the number of phones installed per region increases over time.\n\nOf course, there are a number of statistical data manipulations that can be done, such as the ones we talked about earlier, but for the sake of simplicity, I'll just use the data as it is.  \n\nSo I used the `facet_warp()` function to split the plot by region.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |> \n  ggplot(aes(Year, Numbers, fill = Region)) + \n  geom_col(show.legend = FALSE) + \n  facet_wrap(vars(Region))\n```\n\n::: {.cell-output-display}\n![](nb_007_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n\nAs you might expect, regions with smaller numbers are harder to detect changes in.  \n\nTo help with this, `ggplot` has an option to scale each faceted plot differently.\n\nWhen I use `facet_warp()`, `scales` argument help to do it.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |> \n  ggplot(aes(Year, Numbers, fill = Region)) + \n  geom_col(position = \"dodge\", show.legend = FALSE) + \n  facet_wrap(vars(Region), scales = \"free_y\" )\n```\n\n::: {.cell-output-display}\n![](nb_007_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n\nIt looks better 😁. \n\nI then add extra stuff to decorate this plot.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |> \n  ggplot(aes(Year, Numbers, fill = Region)) + \n  geom_col(position = \"dodge\", show.legend = FALSE) + \n  facet_wrap(vars(Region), scales = \"free_y\") +\n  labs(title = \"The World's Telephones\",\n       subtitle = \"The number of telephones in various regions of the world (in thousands)\",\n       x = \"Year\", y = \"Number of Telephone\") +\n  theme_bw() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n```\n\n::: {.cell-output-display}\n![](nb_007_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n\n\n\n<div class=\"right\">\n__END OF POST__\n</div>\n",
    "supporting": [
      "nb_007_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}