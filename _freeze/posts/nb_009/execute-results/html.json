{
  "hash": "83ce37914da3687ab6601e9ea9adea8a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Lollipop plot with Islands\"\nauthor: \"Sean Ahn\"\ndate: \"2024-01-21\"\ncategories: [ggplot, visualization]\nimage: \"nb_009.png\"\n---\n\n\n\nWhen displaying a large number of datasets in a bar plot or line plot, it is difficult to distinguish between the data due to the phenomenon of overlapping lines.   \n\n**A lollipop plot** is an effective plot to alleviate this phenomenon.  \n\nif you read more information, refer to followings;   \n\n![](https://www.highcharts.com/docs/chart-and-series-types/lollipop-series)\n\n![](https://datavizproject.com/data-type/lollipop-chart/)\n\n![](https://towardsdatascience.com/lollipop-charts-2f748b90f6f0)\n\n\n\n## Initializing\n\nI usually use the following code for initialization. If you don't want to remove plots and/or variables, you can skip it.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngraphics.off()\nrm(list = ls())\ngc()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          used (Mb) gc trigger (Mb) limit (Mb) max used (Mb)\nNcells  601767 32.2    1369207 73.2         NA   700254 37.4\nVcells 1110568  8.5    8388608 64.0      16384  1963377 15.0\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nversion\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n               _                           \nplatform       aarch64-apple-darwin20      \narch           aarch64                     \nos             darwin20                    \nsystem         aarch64, darwin20           \nstatus                                     \nmajor          4                           \nminor          4.0                         \nyear           2024                        \nmonth          04                          \nday            24                          \nsvn rev        86474                       \nlanguage       R                           \nversion.string R version 4.4.0 (2024-04-24)\nnickname       Puppy Cup                   \n```\n\n\n:::\n:::\n\n\n\n## Loading Useful Library\n\nWe want to use as few packages (some might call them \"libraries\") as possible. If possible, I'm going to use only the **tidyverse** package. [Tidyverse](https://www.tidyverse.org) is one of the most famous packages in R programming, and it's really powerful and useful.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n‚îÄ‚îÄ Attaching core tidyverse packages ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidyverse 2.0.0 ‚îÄ‚îÄ\n‚úî dplyr     1.1.4     ‚úî readr     2.1.5\n‚úî forcats   1.0.0     ‚úî stringr   1.5.1\n‚úî ggplot2   3.5.1     ‚úî tibble    3.2.1\n‚úî lubridate 1.9.3     ‚úî tidyr     1.3.1\n‚úî purrr     1.0.2     \n‚îÄ‚îÄ Conflicts ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidyverse_conflicts() ‚îÄ‚îÄ\n‚úñ purrr::%||%()   masks base::%||%()\n‚úñ dplyr::filter() masks stats::filter()\n‚úñ dplyr::lag()    masks stats::lag()\n‚Ñπ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n:::\n\n\n\n## Select Dataset\n\nWhen I write posts in my blog, I use the built-in dataset because I don't want the reader to suffer by having to find the data from somewhere else.\n\nThe dataset I'll be using in this post is shown below ‚¨áÔ∏è ‚¨áÔ∏è ‚¨áÔ∏è.\n\n<br>\n\n**Areas of the World's Major Landmasses** \n\nDescription\nThe areas in thousands of square miles of the landmasses which exceed 10,000 square miles.  \n\n\nUsage   \nislands  \n\nFormat  \nA named vector of length 48.  \n\nSource  \nThe World Almanac and Book of Facts, 1975, page 406.\n\nReferences  \nMcNeil, D. R. (1977) Interactive Data Analysis. Wiley.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nislands\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          Africa       Antarctica             Asia        Australia \n           11506             5500            16988             2968 \n    Axel Heiberg           Baffin            Banks           Borneo \n              16              184               23              280 \n         Britain          Celebes            Celon             Cuba \n              84               73               25               43 \n           Devon        Ellesmere           Europe        Greenland \n              21               82             3745              840 \n          Hainan       Hispaniola         Hokkaido           Honshu \n              13               30               30               89 \n         Iceland          Ireland             Java           Kyushu \n              40               33               49               14 \n           Luzon       Madagascar         Melville         Mindanao \n              42              227               16               36 \n        Moluccas      New Britain       New Guinea  New Zealand (N) \n              29               15              306               44 \n New Zealand (S)     Newfoundland    North America    Novaya Zemlya \n              58               43             9390               32 \n Prince of Wales         Sakhalin    South America      Southampton \n              13               29             6795               16 \n     Spitsbergen          Sumatra           Taiwan         Tasmania \n              15              183               14               26 \nTierra del Fuego            Timor        Vancouver         Victoria \n              19               13               12               82 \n```\n\n\n:::\n:::\n\n\n\n## Visualization\n\n`islands` is a numeric in the form of a named vector, so you can easily draw a dot plot using the built-in function as shown below.  \n\nActually, it's not bad. ü§î   \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndotchart(log(islands[order(islands)], 10),\n   main = \"islands data: log10(area) (log10(sq. miles))\")\n```\n\n::: {.cell-output-display}\n![](nb_009_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n\nIt's not ugly, but let's make it a little easier to see and more pleasing to the eye.  \n\nI'll be plotting with `ggplot2` as before, so let's change the numeric vector type of dataset to dataframe.   \n\nImportantly, I need to get the attributes as well.   \n\nTo do this, I use the `attributes` function and the `unlist` function.  \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- data_frame(name = unlist(attributes(islands)),\n                 area = islands) |> arrange(desc(area))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: `data_frame()` was deprecated in tibble 1.1.0.\n‚Ñπ Please use `tibble()` instead.\n```\n\n\n:::\n\n```{.r .cell-code}\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 48 √ó 2\n   name           area\n   <chr>         <dbl>\n 1 Asia          16988\n 2 Africa        11506\n 3 North America  9390\n 4 South America  6795\n 5 Antarctica     5500\n 6 Europe         3745\n 7 Australia      2968\n 8 Greenland       840\n 9 New Guinea      306\n10 Borneo          280\n# ‚Ñπ 38 more rows\n```\n\n\n:::\n:::\n\n\n\nI used the `reorder` function to rearrange them to look nice.   \n\nWhen visualizing a large number of data, it is helpful to order the data before visualizing it to help the reader understand it.  \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |> ggplot(aes(x = 0, y = reorder(name, area), xend = log10(area), yend = name, \n                 color = name)) +\n  geom_segment(show.legend = FALSE)\n```\n\n::: {.cell-output-display}\n![](nb_009_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\nLet's draw a dot that corresponds to the candy in lollipop.   \n\nThis can be done simply by using `geom_point` to draw the dot at the end of the line.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |> ggplot(aes(x = 0, y = reorder(name, area), xend = log10(area), yend = name, \n                 color = name)) +\n  geom_segment(show.legend = FALSE) +\n  geom_point(aes(x = log10(area)), show.legend = FALSE)\n```\n\n::: {.cell-output-display}\n![](nb_009_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n\nGreat! It looks much better!\n\nWe recommend using colors without duplication whenever possible, as using too many different colors or duplicating the same color can make it difficult to understand the data.   \n\nIn this case, we have a lot of data and it's hard to get the colors we want from the built-in palette, so we'll create a custom color palette in the blue family and apply it.   \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a vector of colors\ncolors <- c(\"#191970\", \"#4682b4\", \"#b0c4de\")\n\n# Create a color palette function\npalette_func <- colorRampPalette(colors)\n\n# Generate a color palette with number of rows\ncolor_palette <- palette_func(nrow(df))\n```\n:::\n\n\n\n\nTo give a darker color to a larger area, I gave the `reorder` function the `decreasing` option so that Midnight Blue covers the largest area and Pale Sky Blue covers the smallest area.  \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |> ggplot(aes(x = 0, y = reorder(name, area), xend = log10(area), yend = name, \n                 color = reorder(name, area, decreasing = TRUE))) +\n  geom_segment(show.legend = FALSE) +\n  geom_point(aes(x = log10(area)), show.legend = FALSE) +\n  scale_color_manual(values = color_palette) +\n  labs(title = \"Areas of the World's Major Landmasses\",\n       subtitle = \"The areas in thousands of square miles of the landmasses \\nwhich exceed 10,000 square miles.\",\n       x = \"Area, log10(sq.mile)\", y = NULL) +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](nb_009_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n\n\nGood job! üëç\n\n\n\n\n\n\n\n<div class=\"right\">\n__END OF POST__\n</div>\n\n\n\n\n\n\n\n\n\n\n\n\n",
    "supporting": [
      "nb_009_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}