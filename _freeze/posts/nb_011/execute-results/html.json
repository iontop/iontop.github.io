{
  "hash": "6801d51cc362ab79c43e152192cd3dd8",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Density plot with iris\"\nauthor: \"Sean Ahn\"\ndate: \"2024-09-12\"\ncategories: [ggplot, visualization]\nimage: \"nb_011.png\"\n---\n\n\n\nIn today's post, we will learn how to show multiple distribution states in one plot.   \nSometimes we need to show the distribution of data according to more than one variable in one plot.   \nIt's not easy to fit a lot of data into a single plot, but it's even harder to convey the data to the reader quickly and accurately.  \n\n## Initializing\n\nI usually use the following code for initialization. If you don't want to remove plots and/or variables, you can skip it.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngraphics.off()\nrm(list = ls())\ngc()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          used (Mb) gc trigger (Mb) limit (Mb) max used (Mb)\nNcells  602107 32.2    1370178 73.2         NA   700254 37.4\nVcells 1113563  8.5    8388608 64.0      16384  1963366 15.0\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nversion\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n               _                           \nplatform       aarch64-apple-darwin20      \narch           aarch64                     \nos             darwin20                    \nsystem         aarch64, darwin20           \nstatus                                     \nmajor          4                           \nminor          4.0                         \nyear           2024                        \nmonth          04                          \nday            24                          \nsvn rev        86474                       \nlanguage       R                           \nversion.string R version 4.4.0 (2024-04-24)\nnickname       Puppy Cup                   \n```\n\n\n:::\n:::\n\n\n\n## Loading Useful Library\n\nWe want to use as few packages (some might call them \"libraries\") as possible. If possible, I'm going to use only the **tidyverse** package. [Tidyverse](https://www.tidyverse.org) is one of the most famous packages in R programming, and it's really powerful and useful.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ purrr::%||%()   masks base::%||%()\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n:::\n\n\n\n## Select Dataset\n\nWhen I write posts in my blog, I use the built-in dataset because I don't want the reader to suffer by having to find the data from somewhere else.\n\nThe dataset I'll be using in this post is shown below ⬇️ ⬇️ ⬇️.\n\n<br>\n\n**Edgar Anderson's Iris Data** \n\nDescription. \nThis famous (Fisher's or Anderson's) iris data set gives the measurements in centimeters of the variables sepal length and width and petal length and width, respectively, for 50 flowers from each of 3 species of iris. The species are Iris setosa, versicolor, and virginica.  \n\nUsage   \niris  \niris3  \n\nFormat   \niris is a data frame with 150 cases (rows) and 5 variables (columns) named Sepal.Length, Sepal.Width, Petal.Length, Petal.Width, and Species.  \niris3 gives the same data arranged as a 3-dimensional array of size 50 by 4 by 3, as once provided by S-PLUS. The first dimension gives the case number within the species subsample, the second the measurements with names Sepal L., Sepal W., Petal L., and Petal W., and the third the species.  \n\nSource  \nFisher, R. A. (1936) The use of multiple measurements in taxonomic problems. Annals of Eugenics, 7, Part II, 179–188. doi:10.1111/j.1469-1809.1936.tb02137.x.\n\nThe data were collected by Anderson, Edgar (1935). The irises of the Gaspe Peninsula, Bulletin of the American Iris Society, 59, 2–5.  \n\nReferences  \nBecker, R. A., Chambers, J. M. and Wilks, A. R. (1988) The New S Language. Wadsworth & Brooks/Cole. (has iris3 as iris.)  \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\niris |> head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1          5.1         3.5          1.4         0.2  setosa\n2          4.9         3.0          1.4         0.2  setosa\n3          4.7         3.2          1.3         0.2  setosa\n4          4.6         3.1          1.5         0.2  setosa\n5          5.0         3.6          1.4         0.2  setosa\n6          5.4         3.9          1.7         0.4  setosa\n```\n\n\n:::\n:::\n\n\n\n`iris` dataset is a grouped dataframe object.  \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\niris |> class()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"data.frame\"\n```\n\n\n:::\n:::\n\n\n\nI make `df` variable then store `iris` dataframe.   \n\nTo keep original dataset, duplication is one of the best way.  \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- iris\n```\n:::\n\n\n\ntake a look dataset quickly. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 150\nColumns: 5\n$ Sepal.Length <dbl> 5.1, 4.9, 4.7, 4.6, 5.0, 5.4, 4.6, 5.0, 4.4, 4.9, 5.4, 4.…\n$ Sepal.Width  <dbl> 3.5, 3.0, 3.2, 3.1, 3.6, 3.9, 3.4, 3.4, 2.9, 3.1, 3.7, 3.…\n$ Petal.Length <dbl> 1.4, 1.4, 1.3, 1.5, 1.4, 1.7, 1.4, 1.5, 1.4, 1.5, 1.5, 1.…\n$ Petal.Width  <dbl> 0.2, 0.2, 0.2, 0.2, 0.2, 0.4, 0.3, 0.2, 0.2, 0.1, 0.2, 0.…\n$ Species      <fct> setosa, setosa, setosa, setosa, setosa, setosa, setosa, s…\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nunique(df$Species)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] setosa     versicolor virginica \nLevels: setosa versicolor virginica\n```\n\n\n:::\n:::\n\n\n\nNow we know that this dataset contains data on three different types of species, and we want to visualize how they are distributed across the different Species types.  \n\n## Visualization\n\nThe simplest way is to use the default function `hist()`.   \nThis is actually quite good, and depending on how you preprocess your data, it can lead to some very powerful visualizations. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhist(df$Sepal.Width)\n```\n\n::: {.cell-output-display}\n![](nb_011_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n\nHowever, the visualization is not suitable for viewing the distribution of different variables.   \nIf you want to see the distribution of sepal width by species in the `iris` dataset, the `hist()` function has its limitations.  \n\nOf course, it's not without its challenges.   \nYou can also use the `for()` function to create multiple plots showing the distribution of density variable by Run type, as shown below.   However, this is a one of possible solutions, not a good solution.   \nWe're going to find a way to make it work.  \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Tree별로 히스토그램 생성\nunique_species <- unique(df$Species)\n\nfor (species in unique_species) {\n  subset_data <- df[df$Species == species, ]\n  hist(subset_data$Sepal.Width,\n       breaks = seq(1.0, 8.0, 0.5),\n       main = paste(\"Sepal length of \", species, \"density\"),\n       xlab = \"Sepal length\",\n       ylab = \"Frequency\")\n}\n```\n\n::: {.cell-output-display}\n![](nb_011_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](nb_011_files/figure-html/unnamed-chunk-10-2.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](nb_011_files/figure-html/unnamed-chunk-10-3.png){width=672}\n:::\n:::\n\n\n\nWhile it is possible to plot density plots for each species, these histograms are not sufficient if you need to compare between species or with the whole population.   \n\nTo find another way, let's use the `ggplot()` package for a more comfortable visualization.  \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |> \n  ggplot() + geom_histogram(aes(x = Sepal.Width))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](nb_011_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n\nIf we want to know the distribution, histograms are a great way to do so, but when we need to compare the whole or compare different variables, histograms alone are not very informative.\n\nFor example, if the two distributions are similar, or if the front layer shows larger values, or if the distribution is based on only one variable, as shown below, the comparison becomes more difficult.  This is the case for sepal widths greater than 4 cm in the plot below.  \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(df, aes(x = Sepal.Width)) + \n  geom_histogram(fill = \"gray\", color = \"black\", binwidth = 0.25, alpha = 0.5) +\n  geom_histogram(data = subset(iris, Species == \"setosa\"), \n                 aes(x = Sepal.Width), \n                 fill = \"blue\",color = \"black\", binwidth = 0.25, alpha = 0.5) +\n  labs(title = \"Sepal Width distribution\", \n       subtitle = \"Note. gray color shows overall data, blue color shows setosa only\",\n       x = \"Sepal Width (cm)\", y = \"Count\")\n```\n\n::: {.cell-output-display}\n![](nb_011_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n\nIt is recommended to use a nested density plot rather than a nested histogram to compare two pieces of data or two variables.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |> \n  ggplot() + geom_density(aes(x = Sepal.Width, fill = Species), alpha = 0.5) +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](nb_011_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n\n::: {.callout-caution}\nOne thing to note when plotting a density plot is that the `position` setting must be entered as **“stack”**.  \n\nThe default value is “jitter”, which means that the x-values are offset from their actual positions to make them more comparable, as shown above.  \n\nThis makes it difficult to compare the distribution of the actual data, so it's important to enter **position = “stack”**.  \n\nBelow is the official documentation of ggplot2 for those who want to know more details.   \n\n[https://ggplot2.tidyverse.org/reference/geom_density.html](https://ggplot2.tidyverse.org/reference/geom_density.html)\n\n[https://ggplot2.tidyverse.org/reference/layer_positions.html](https://ggplot2.tidyverse.org/reference/layer_positions.html)\n\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |> \n  ggplot() + geom_density(aes(x = Sepal.Width, fill = Species), alpha = 0.5, position = \"stack\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](nb_011_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n\nIt is common to use the `filter()` function to extract only the variables that need to be compared.  \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |> filter(Species != \"virginica\") |> \n  ggplot() + geom_density(aes(x = Sepal.Width, fill = Species), alpha = 0.5, position = \"stack\") +\n  theme_minimal()  \n```\n\n::: {.cell-output-display}\n![](nb_011_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n\nIf you want to exclude one of the three variables and compare the remaining two variables, you can get the remaining data after excluding the variables you don't need, as shown above, but sometimes you may be dealing with data that has many variables that you want to exclude.  \n\nIn this case, you can still use the `filter()` function, but you can use operators to simplify the process of extracting only the data you need.  \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |> filter(Species == \"setosa\" | Species ==\"virginica\") |> \n  ggplot() + geom_density(aes(x = Sepal.Width, fill = Species), alpha = 0.5, position = \"stack\") +\n  theme_minimal() \n```\n\n::: {.cell-output-display}\n![](nb_011_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n\nExtracting the dataset you want to compare to the whole and giving different values to the group columns. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf$Group <- \"Overall\"\nsetosa_data <- subset(df, Species == \"setosa\")\nsetosa_data$Group <- \"Setosa\"\n```\n:::\n\n\n\nCombine two datasets with `rbind()` function\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncombined_data <- rbind(df, setosa_data)\n```\n:::\n\n\n\nthen... plotting. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(combined_data, aes(x = Sepal.Width, fill = Group)) + \n  geom_density(position = \"stack\", alpha = 0.5) +\n  labs(title = \"Sepal Width distribution (Loses marginal densities)\", \n       subtitle = \"Density plot of sepal width distribution of iris overall distribution and setosa species\",\n       x = \"Sepal Width (cm)\", y = \"Density\", fill = \"\") +\n  scale_fill_manual(values = c(\"Overall\" = \"gray\", \"Setosa\" = \"blue\")) +\n  theme_minimal() +\n  theme(legend.position = \"bottom\")\n```\n\n::: {.cell-output-display}\n![](nb_011_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n\nIf you wanted to plot **Preserves marginal densities**, we would type like below: \"y = after_stat(count)\".   \n\n*Loses marginal densities* means that the individual distributions of each variable change as a result of some transformation or modeling process, meaning that the marginal distributions around the variables before the transformation are different after the transformation.\n\n*Preserves marginal densities*, on the other hand, means that the individual distributions of each variable do not change during the transformation or modeling process. This means that the marginal probability distributions of the variables before the transformation remain the same after the transformation.  \n\nLoses marginal densities and preserves marginal densities have their own strengths, so you should choose the right one for your situation.  \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(combined_data, aes(x = Sepal.Width, y = after_stat(count), fill = Group)) + \n  geom_density(position = \"stack\", alpha = 0.5) +\n  labs(title = \"Sepal Width distribution (Preserves marginal densities)\", \n       subtitle = \"Density plot of sepal width distribution of iris overall distribution and setosa species\",\n       x = \"Sepal Width (cm)\", y = \"Density * Number of points\", fill = \"\") +\n  scale_fill_manual(values = c(\"Overall\" = \"gray\", \"Setosa\" = \"blue\")) +\n  theme_minimal() +\n  theme(legend.position = \"bottom\")\n```\n\n::: {.cell-output-display}\n![](nb_011_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\n\nGood job! 👍\n\n\n\n\n\n\n\n<div class=\"right\">\n__END OF POST__\n</div>\n",
    "supporting": [
      "nb_011_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}