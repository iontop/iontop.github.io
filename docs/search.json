[
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "My posts",
    "section": "",
    "text": "Strip plot with WorldPhones\n\n\n\n\n\n\nggplot\n\n\nvisualization\n\n\n\n\n\n\n\n\n\nJan 22, 2024\n\n\nSean Ahn\n\n\n\n\n\n\n\n\n\n\n\n\nLollipop plot with Islands\n\n\n\n\n\n\nggplot\n\n\nvisualization\n\n\n\n\n\n\n\n\n\nJan 21, 2024\n\n\nSean Ahn\n\n\n\n\n\n\n\n\n\n\n\n\nPyramid plot with ToothGrowth\n\n\n\n\n\n\nggplot\n\n\nvisualization\n\n\n\n\n\n\n\n\n\nOct 22, 2023\n\n\nSean Ahn\n\n\n\n\n\n\n\n\n\n\n\n\nColumn plot with World’s Telephones\n\n\n\n\n\n\nggplot\n\n\nvisualization\n\n\n\n\n\n\n\n\n\nOct 1, 2023\n\n\nSean Ahn\n\n\n\n\n\n\n\n\n\n\n\n\nLine plot with CO2\n\n\n\n\n\n\nggplot\n\n\nvisualization\n\n\n\n\n\n\n\n\n\nAug 26, 2023\n\n\nSean Ahn\n\n\n\n\n\n\n\n\n\n\n\n\nBar Plot with morley\n\n\n\n\n\n\nggplot\n\n\nvisualization\n\n\n\n\n\n\n\n\n\nAug 26, 2023\n\n\nSean Ahn\n\n\n\n\n\n\n\n\n\n\n\n\nBox plot with ToothGrowth\n\n\n\n\n\n\nggplot\n\n\nvisualization\n\n\n\n\n\n\n\n\n\nAug 26, 2023\n\n\nSean Ahn\n\n\n\n\n\n\n\n\n\n\n\n\nArea plot with Nile\n\n\n\n\n\n\nggplot\n\n\nvisualization\n\n\n\n\n\n\n\n\n\nAug 26, 2023\n\n\nSean Ahn\n\n\n\n\n\n\n\n\n\n\n\n\nScatter plot with faithful\n\n\n\n\n\n\nggplot\n\n\nvisualization\n\n\n\n\n\n\n\n\n\nAug 26, 2023\n\n\nSean Ahn\n\n\n\n\n\n\n\n\n\n\n\n\nBar Plot with HairEyeColor\n\n\n\n\n\n\nggplot\n\n\nvisualization\n\n\n\n\n\n\n\n\n\nAug 19, 2023\n\n\nSean Ahn\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome",
    "section": "",
    "text": "Hello!"
  },
  {
    "objectID": "posts/nb_003/index.html",
    "href": "posts/nb_003/index.html",
    "title": "Scatter plot with faithful",
    "section": "",
    "text": "In this post, I’ll make scatter plot with trend line. Scatter plot display two variables on Cartesian coordinates.\nScatter plot is useful and convenient because it can show either continuous variables or discrete variables all."
  },
  {
    "objectID": "posts/nb_003/index.html#initilizing",
    "href": "posts/nb_003/index.html#initilizing",
    "title": "Scatter plot with faithful",
    "section": "Initilizing",
    "text": "Initilizing\nI usually use the following code for initialization. If you don’t want to remove plots and/or variables, you can skip it.\n\ngraphics.off()\nrm(list = ls())\ngc()\n\n          used (Mb) gc trigger (Mb) limit (Mb) max used (Mb)\nNcells  578448 30.9    1318007 70.4         NA   669402 35.8\nVcells 1057511  8.1    8388608 64.0      16384  1851791 14.2\n\n\n\nversion\n\n               _                           \nplatform       aarch64-apple-darwin20      \narch           aarch64                     \nos             darwin20                    \nsystem         aarch64, darwin20           \nstatus                                     \nmajor          4                           \nminor          3.1                         \nyear           2023                        \nmonth          06                          \nday            16                          \nsvn rev        84548                       \nlanguage       R                           \nversion.string R version 4.3.1 (2023-06-16)\nnickname       Beagle Scouts"
  },
  {
    "objectID": "posts/nb_003/index.html#loading-useful-library",
    "href": "posts/nb_003/index.html#loading-useful-library",
    "title": "Scatter plot with faithful",
    "section": "Loading Useful Library",
    "text": "Loading Useful Library\nWe want to use as few packages (some might call them “libraries”) as possible. If possible, I’m going to use only the tidyverse package. Tidyverse is one of the most famous packages in R programming, and it’s really powerful and useful.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors"
  },
  {
    "objectID": "posts/nb_003/index.html#select-dataset",
    "href": "posts/nb_003/index.html#select-dataset",
    "title": "Scatter plot with faithful",
    "section": "Select Dataset",
    "text": "Select Dataset\nWhen I write posts in my blog, I use the built-in dataset because I don’t want the reader to suffer by having to find the data from somewhere else.\nThe dataset I’ll be using in this post is shown below ⬇️ .\n\nOld Faithful Geyser Data\n\nDescription\nWaiting time between eruptions and the duration of the eruption for the Old Faithful geyser in Yellowstone National Park, Wyoming, USA.\n\n\nUsage\nfaithful\n\n\nFormat\nA data frame with 272 observations on 2 variables.\n[,1] eruptions numeric Eruption time in mins [,2] waiting numeric Waiting time to next eruption (in mins)\n\n\nDetails\nA closer look at faithful$eruptions reveals that these are heavily rounded times originally in seconds, where multiples of 5 are more frequent than expected under non-human measurement. For a better version of the eruption times, see the example below.\nThere are many versions of this dataset around: Azzalini and Bowman (1990) use a more complete version.\n\nFirst, let’s take a quick look at the contents of the dataset with head() function.\nI can see there are 2 columns and both data is number which is double type.\n\nfaithful |&gt; head()\n\n  eruptions waiting\n1     3.600      79\n2     1.800      54\n3     3.333      74\n4     2.283      62\n5     4.533      85\n6     2.883      55\n\n\n\nand check what type is this dataset with class() function.\n\nclass(faithful)\n\n[1] \"data.frame\"\n\n\n\nthen check how big this dataset is with dim() function.\nfaithful dataset has 272 rows and 2 columns. it also very tiny dataset `r emo::ji(“grin”).\n\ndim(faithful)\n\n[1] 272   2\n\n\n\nfaithful dataset store into df variable to keep original dataset.\n\ndf &lt;- faithful"
  },
  {
    "objectID": "posts/nb_003/index.html#visualization",
    "href": "posts/nb_003/index.html#visualization",
    "title": "Scatter plot with faithful",
    "section": "Visualization",
    "text": "Visualization\nYou can use ggplot() and geom_point() to create a simple scatterplot.\nYou may have noticed that there is a linear trend between the variables ‘atmospheric’ and ‘eruptive’.\nA scatter plot allows you to notice the trend between these two variables at once 👍.\n\ndf |&gt; \n  ggplot(aes(waiting, eruptions)) +\n  geom_point()\n\n\n\n\n\n\n\n\n\nI’ve coloured it to make the linearity along the x-axis values clear.\nFor continuous values, sometimes the colour difference from adjusent values is not significant.\n\ndf |&gt; \n  ggplot(aes(waiting, eruptions, color = waiting)) +\n  geom_point()\n\n\n\n\n\n\n\n\n\nTo make the linear relationship between the two variables more visible, I used the cut_number() function to color the ‘waiting’ variable in four separate steps.\nThis way we can see the value of ‘eruptions’ for each level. In fact, the points of the ‘waiting’ variable colored in blue could probably be combined with the points colored in purple, but for the purposes of this post, I’ll leave them unmodified.\n\ndf |&gt; \n  mutate(waitLv = cut_number(waiting, 4)) |&gt; \n  ggplot(aes(waiting, eruptions, color = waitLv)) +\n  geom_point()\n\n\n\n\n\n\n\n\n\nAnyway, I’ve made a good scatterplot. In addition, I want to add a linear trend equation.\nTo do that, I need to create a linear model with the lm() function.\nIt’s a pretty powerful 💪 R function.\nI can create a linear model using just the simple lm() function.\n\n# Calculate slope and intercept of line of best fit\nlinear &lt;- lm(eruptions ~ waiting, data = faithful)\nlinear\n\n\nCall:\nlm(formula = eruptions ~ waiting, data = faithful)\n\nCoefficients:\n(Intercept)      waiting  \n   -1.87402      0.07563  \n\n\n\nlinear$coefficients[1]\n\n(Intercept) \n  -1.874016 \n\ni &lt;- linear$coefficients[1]\n\n\nlinear$coefficients[2]\n\n   waiting \n0.07562795 \n\ns &lt;- linear$coefficients[2]\n\n\nWe got the coefficient value as a result of lm().\nI can see that the slope of the trend line I’m plotting is 0.0756279, and the intercept islinear$coefficients[1]`.\nIt then draws a trend line on the plot with the slope and intercept values.\ngeom_abline() draws a line with specific slope and intercept values as shown below.\n\ndf |&gt; \n  mutate(waitLv = cut_number(waiting, 4)) |&gt; \n  ggplot(aes(waiting, eruptions, color = waitLv)) +\n  geom_point() +\n  geom_abline(intercept = i, slope = s)\n\n\n\n\n\n\n\n\n\nIf I use geom_smooth() to represent a confidence interval (se = TRUE), I can draw a trend line at once without having to find the slope and intercept values outside.\nHowever, even with geom_smooth(), I still need to know the slope and intercept to plot the trend equations, which can be redundant.\nIt is users’ choice to use geom_smooth() or geom_abline().\n\ndf |&gt; \n  mutate(waitLv = cut_number(waiting, 4)) |&gt; \n  ggplot(aes(waiting, eruptions)) + # Should remove \"aes(color = waitLv)\" in ggplot()\n  geom_point(aes(color = waitLv)) +\n  geom_smooth(method = lm ,se = TRUE, color = \"black\", linewidth = 0.5) # BUT!! to extract equation you should using \"lm()\"\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\nI put equation in plot with annotate() at proper location. and title, subtitle, name of x-axis and y-axis also display with lab().\nFinally I got plot as below.\n\ndf |&gt; \n  mutate(waitLv = cut_number(waiting, 4)) |&gt; \n  ggplot(aes(waiting, eruptions, color = waitLv)) +\n  geom_point() +\n  geom_abline(intercept = i, slope = s, color = \"blue\", lty = 2) +\n  annotate(\"text\",x = 50, y = 4.5, label = paste0(\"y = \", round(s,5) ,\"x +\",round(i,5))) +\n  labs(title = \"Old Faithful geyser\",\n       subtitle = paste0(\"Waiting time between eruptions and the duration of the eruption for the Old Faithful geyser\",\"\\n\",\n                         \"in Yellowstone National Park, Wyoming, USA.\"),\n       x = \"Waiting time to next eruption (min)\", y = \"Eruption time (min)\", color = \"Lv. of Wating Time\") +\n  theme_bw() +\n  theme(legend.position = \"bottom\")\n\n\n\n\n\n\n\n\n\ngood luck! 👍\n\nEND OF POST"
  },
  {
    "objectID": "posts/nb_005/index.html",
    "href": "posts/nb_005/index.html",
    "title": "Box plot with ToothGrowth",
    "section": "",
    "text": "In this post, I’ve done a boxplot with ToothGrowth dataset. as you know, box plot is one of the most useful plot to visualize the dataset. But I don’t explain what box plot. If you want to know what box plot is, you can see the wiki."
  },
  {
    "objectID": "posts/nb_005/index.html#initializing",
    "href": "posts/nb_005/index.html#initializing",
    "title": "Box plot with ToothGrowth",
    "section": "Initializing",
    "text": "Initializing\nI usually use the following code for initialization. If you don’t want to remove plots and/or variables, you can skip it.\n\ngraphics.off()\nrm(list = ls())\ngc()\n\n          used (Mb) gc trigger (Mb) limit (Mb) max used (Mb)\nNcells  578462 30.9    1318111 70.4         NA   669274 35.8\nVcells 1056852  8.1    8388608 64.0      16384  1851504 14.2\n\n\n\nversion\n\n               _                           \nplatform       aarch64-apple-darwin20      \narch           aarch64                     \nos             darwin20                    \nsystem         aarch64, darwin20           \nstatus                                     \nmajor          4                           \nminor          3.1                         \nyear           2023                        \nmonth          06                          \nday            16                          \nsvn rev        84548                       \nlanguage       R                           \nversion.string R version 4.3.1 (2023-06-16)\nnickname       Beagle Scouts"
  },
  {
    "objectID": "posts/nb_005/index.html#loading-useful-library",
    "href": "posts/nb_005/index.html#loading-useful-library",
    "title": "Box plot with ToothGrowth",
    "section": "Loading Useful Library",
    "text": "Loading Useful Library\nWe want to use as few packages (some might call them “libraries”) as possible. If possible, I’m going to use only the tidyverse package. Tidyverse is one of the most famous packages in R programming, and it’s really powerful and useful.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors"
  },
  {
    "objectID": "posts/nb_005/index.html#select-dataset",
    "href": "posts/nb_005/index.html#select-dataset",
    "title": "Box plot with ToothGrowth",
    "section": "Select Dataset",
    "text": "Select Dataset\nWhen I write posts in my blog, I use the built-in dataset because I don’t want the reader to suffer by having to find the data from somewhere else.\nThe dataset I’ll be using in this post is shown below ⬇️ .\n\nThe Effect of Vitamin C on Tooth Growth in Guinea Pigs\n\nDescription\nThe response is the length of odontoblasts (cells responsible for tooth growth) in 60 guinea pigs. Each animal received one of three dose levels of vitamin C (0.5, 1, and 2 mg/day) by one of two delivery methods, orange juice or ascorbic acid (a form of vitamin C and coded as VC).\n\n\nUsage\nToothGrowth\n\n\nFormat\nA data frame with 60 observations on 3 variables.\n[,1] len numeric Tooth length.\n[,2] supp factor Supplement type (VC or OJ).\n[,3] dose numeric Dose in milligrams/day.\nAs like other posts, I check what is in dataset and how big dataset is.\nNothing special 😎\n\nToothGrowth |&gt; head()\n\n   len supp dose\n1  4.2   VC  0.5\n2 11.5   VC  0.5\n3  7.3   VC  0.5\n4  5.8   VC  0.5\n5  6.4   VC  0.5\n6 10.0   VC  0.5\n\n\n\nToothGrowth |&gt; class()\n\n[1] \"data.frame\"\n\n\n\nToothGrowth |&gt; dim()\n\n[1] 60  3"
  },
  {
    "objectID": "posts/nb_005/index.html#visualization",
    "href": "posts/nb_005/index.html#visualization",
    "title": "Box plot with ToothGrowth",
    "section": "Visualization",
    "text": "Visualization\nAll right! First of all, dataset copied into ‘df’ variable to preserve original data.\nIt is fine for now because I work with built-in dataset. However, I strongly recommend copy if you work with your own dataset. It will help you saving time or work done properly.\n\ndf &lt;- ToothGrowth\ndf |&gt; head()\n\n   len supp dose\n1  4.2   VC  0.5\n2 11.5   VC  0.5\n3  7.3   VC  0.5\n4  5.8   VC  0.5\n5  6.4   VC  0.5\n6 10.0   VC  0.5\n\n\nNow I make simple dotplot. it is hard to understand what data mean. but readers can notice there are distribution on something.\n\ndf |&gt; \n  ggplot(aes(supp, len)) +\n  geom_point()\n\n\n\n\n\n\n\n\nI overlay boxplot with dotplot. it can make readers understand easily because box plot shows lots of information graphically. (e.g median, first quartile, third quartile, etc.).\n\ndf |&gt; \n  ggplot(aes(supp, len)) +\n  geom_boxplot(alpha = 0.5) +\n  geom_point()\n\n\n\n\n\n\n\n\nI colored data respectively to distinguish easily.\n\ndf |&gt; \n  ggplot(aes(supp, len, color = supp)) +\n  geom_boxplot(alpha = 0.5, show.legend = FALSE) +\n  geom_point()\n\n\n\n\n\n\n\n\nI replace to geom_jitter() because some of data is overplotting when I used geom_point().\nIt looks much better! 👍\n\ndf |&gt; \n  ggplot(aes(supp, len, color = supp)) +\n  geom_boxplot(alpha = 0.5, show.legend = FALSE) +\n  geom_jitter(alpha = 0.7, width = 0.2)\n\n\n\n\n\n\n\n\nto make whisker on boxplot, I added min and max column with mutate() function.\n\ndf1 &lt;- \n  df |&gt; \n  group_by(supp) |&gt; \n  mutate(min = min(len), max = max(len))\n\nThen goem_errorbar() shows minimum value and maximum value as like below.\n\ndf1 |&gt; \n  ggplot(aes(supp, len, color = supp)) +\n  geom_boxplot(alpha = 0.5, show.legend = FALSE) +\n  geom_errorbar(aes(ymin = min, ymax = max), alpha = 0.5) +\n  geom_jitter(alpha = 0.7, width = 0.2)\n\n\n\n\n\n\n\n\nIn fact, this boxplot is pretty good enough. To make the boxplot into a dose-dependent plot of tooth growth, I create a new variable named df2.\n\ndf2 &lt;- \n  df |&gt; \n  group_by(supp, dose) |&gt; \n  mutate(min = min(len), max = max(len))\n\nIf I make the plot in the same way as before, and use the facet_warp() function to draw a boxplot by dose, I’ll get something like this.\n\ndf2 |&gt; \n  ggplot(aes(supp, len, color = supp)) +\n  geom_boxplot(alpha = 0.5, show.legend = FALSE) +\n  geom_errorbar(aes(ymin = min, ymax = max), alpha = 0.5) +\n  geom_jitter(alpha = 0.7, width = 0.2) +\n  facet_wrap(vars(dose))\n\n\n\n\n\n\n\n\nAll most done now. to specify what tab means, I change tab names with labeller() function. and I add an explanation in plot, decorate theme.\nI finally got it. 🍺\n\ndose_status &lt;- c(\"0.5\" = \"0.5mg/day\", \"1\" = \"1.0mg/day\", \"2\" = \"2.0mg/day\")\n\n\ndf2 |&gt; \n  ggplot(aes(supp, len, color = supp)) +\n  geom_boxplot(alpha = 0.5, show.legend = FALSE) +\n  geom_errorbar(aes(ymin = min, ymax = max), alpha = 0.5) +\n  geom_jitter(alpha = 0.7, width = 0.2) +\n  facet_wrap(vars(dose), labeller = labeller(dose = dose_status)) +\n  labs(title = \"The Effect of Vitamin C on Tooth Growth in Guinea Pigs\",\n       subtitle = paste0(\"The response is the length of odontoblasts (cells responsible for tooth growth) in 60 guinea pigs.\",\"\\n\", \n                         \"Each animal received one of three dose levels of vitamin C (0.5, 1, and 2 mg/day)\",\"\\n\",\n                         \"by one of two delivery methods, orange juice or ascorbic acid (a form of vitamin C and coded as VC).\"),\n       x = \"Supplement type\", y = \"Tooth length\", color = \"Supplement type\") +\n  theme_bw() + theme(legend.position = \"bottom\")\n\n\n\n\n\n\n\n\n\nEND OF POST"
  },
  {
    "objectID": "posts/nb_009/index.html",
    "href": "posts/nb_009/index.html",
    "title": "Lollipop plot with Islands",
    "section": "",
    "text": "When displaying a large number of datasets in a bar plot or line plot, it is difficult to distinguish between the data due to the phenomenon of overlapping lines.\nA lollipop plot is an effective plot to alleviate this phenomenon.\nif you read more information, refer to followings;\nhttps://www.highcharts.com/docs/chart-and-series-types/lollipop-series\nhttps://datavizproject.com/data-type/lollipop-chart/\nhttps://towardsdatascience.com/lollipop-charts-2f748b90f6f0"
  },
  {
    "objectID": "posts/nb_009/index.html#initializing",
    "href": "posts/nb_009/index.html#initializing",
    "title": "Lollipop plot with Islands",
    "section": "Initializing",
    "text": "Initializing\nI usually use the following code for initialization. If you don’t want to remove plots and/or variables, you can skip it.\n\ngraphics.off()\nrm(list = ls())\ngc()\n\n          used (Mb) gc trigger (Mb) limit (Mb) max used (Mb)\nNcells  585871 31.3    1339214 71.6         NA   669405 35.8\nVcells 1078489  8.3    8388608 64.0      16384  1851683 14.2\n\n\n\nversion\n\n               _                           \nplatform       aarch64-apple-darwin20      \narch           aarch64                     \nos             darwin20                    \nsystem         aarch64, darwin20           \nstatus                                     \nmajor          4                           \nminor          3.1                         \nyear           2023                        \nmonth          06                          \nday            16                          \nsvn rev        84548                       \nlanguage       R                           \nversion.string R version 4.3.1 (2023-06-16)\nnickname       Beagle Scouts"
  },
  {
    "objectID": "posts/nb_009/index.html#loading-useful-library",
    "href": "posts/nb_009/index.html#loading-useful-library",
    "title": "Lollipop plot with Islands",
    "section": "Loading Useful Library",
    "text": "Loading Useful Library\nWe want to use as few packages (some might call them “libraries”) as possible. If possible, I’m going to use only the tidyverse package. Tidyverse is one of the most famous packages in R programming, and it’s really powerful and useful.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.4.4     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors"
  },
  {
    "objectID": "posts/nb_009/index.html#select-dataset",
    "href": "posts/nb_009/index.html#select-dataset",
    "title": "Lollipop plot with Islands",
    "section": "Select Dataset",
    "text": "Select Dataset\nWhen I write posts in my blog, I use the built-in dataset because I don’t want the reader to suffer by having to find the data from somewhere else.\nThe dataset I’ll be using in this post is shown below ⬇️ ⬇️ ⬇️.\n\nAreas of the World’s Major Landmasses\nDescription The areas in thousands of square miles of the landmasses which exceed 10,000 square miles.\nUsage\nislands\nFormat\nA named vector of length 48.\nSource\nThe World Almanac and Book of Facts, 1975, page 406.\nReferences\nMcNeil, D. R. (1977) Interactive Data Analysis. Wiley.\n\nislands\n\n          Africa       Antarctica             Asia        Australia \n           11506             5500            16988             2968 \n    Axel Heiberg           Baffin            Banks           Borneo \n              16              184               23              280 \n         Britain          Celebes            Celon             Cuba \n              84               73               25               43 \n           Devon        Ellesmere           Europe        Greenland \n              21               82             3745              840 \n          Hainan       Hispaniola         Hokkaido           Honshu \n              13               30               30               89 \n         Iceland          Ireland             Java           Kyushu \n              40               33               49               14 \n           Luzon       Madagascar         Melville         Mindanao \n              42              227               16               36 \n        Moluccas      New Britain       New Guinea  New Zealand (N) \n              29               15              306               44 \n New Zealand (S)     Newfoundland    North America    Novaya Zemlya \n              58               43             9390               32 \n Prince of Wales         Sakhalin    South America      Southampton \n              13               29             6795               16 \n     Spitsbergen          Sumatra           Taiwan         Tasmania \n              15              183               14               26 \nTierra del Fuego            Timor        Vancouver         Victoria \n              19               13               12               82"
  },
  {
    "objectID": "posts/nb_009/index.html#visualization",
    "href": "posts/nb_009/index.html#visualization",
    "title": "Lollipop plot with Islands",
    "section": "Visualization",
    "text": "Visualization\nislands is a numeric in the form of a named vector, so you can easily draw a dot plot using the built-in function as shown below.\nActually, it’s not bad. 🤔\n\ndotchart(log(islands[order(islands)], 10),\n   main = \"islands data: log10(area) (log10(sq. miles))\")\n\n\n\n\n\n\n\n\nIt’s not ugly, but let’s make it a little easier to see and more pleasing to the eye.\nI’ll be plotting with ggplot2 as before, so let’s change the numeric vector type of dataset to dataframe.\nImportantly, I need to get the attributes as well.\nTo do this, I use the attributes function and the unlist function.\n\ndf &lt;- data_frame(name = unlist(attributes(islands)),\n                 area = islands) |&gt; arrange(desc(area))\n\nWarning: `data_frame()` was deprecated in tibble 1.1.0.\nℹ Please use `tibble()` instead.\n\ndf\n\n# A tibble: 48 × 2\n   name           area\n   &lt;chr&gt;         &lt;dbl&gt;\n 1 Asia          16988\n 2 Africa        11506\n 3 North America  9390\n 4 South America  6795\n 5 Antarctica     5500\n 6 Europe         3745\n 7 Australia      2968\n 8 Greenland       840\n 9 New Guinea      306\n10 Borneo          280\n# ℹ 38 more rows\n\n\nI used the reorder function to rearrange them to look nice.\nWhen visualizing a large number of data, it is helpful to order the data before visualizing it to help the reader understand it.\n\ndf |&gt; ggplot(aes(x = 0, y = reorder(name, area), xend = log10(area), yend = name, \n                 color = name)) +\n  geom_segment(show.legend = FALSE)\n\n\n\n\n\n\n\n\nLet’s draw a dot that corresponds to the candy in lollipop.\nThis can be done simply by using geom_point to draw the dot at the end of the line.\n\ndf |&gt; ggplot(aes(x = 0, y = reorder(name, area), xend = log10(area), yend = name, \n                 color = name)) +\n  geom_segment(show.legend = FALSE) +\n  geom_point(aes(x = log10(area)), show.legend = FALSE)\n\n\n\n\n\n\n\n\nGreat! It looks much better!\nWe recommend using colors without duplication whenever possible, as using too many different colors or duplicating the same color can make it difficult to understand the data.\nIn this case, we have a lot of data and it’s hard to get the colors we want from the built-in palette, so we’ll create a custom color palette in the blue family and apply it.\n\n# Create a vector of colors\ncolors &lt;- c(\"#191970\", \"#4682b4\", \"#b0c4de\")\n\n# Create a color palette function\npalette_func &lt;- colorRampPalette(colors)\n\n# Generate a color palette with number of rows\ncolor_palette &lt;- palette_func(nrow(df))\n\nTo give a darker color to a larger area, I gave the reorder function the decreasing option so that Midnight Blue covers the largest area and Pale Sky Blue covers the smallest area.\n\ndf |&gt; ggplot(aes(x = 0, y = reorder(name, area), xend = log10(area), yend = name, \n                 color = reorder(name, area, decreasing = TRUE))) +\n  geom_segment(show.legend = FALSE) +\n  geom_point(aes(x = log10(area)), show.legend = FALSE) +\n  scale_color_manual(values = color_palette) +\n  labs(title = \"Areas of the World's Major Landmasses\",\n       subtitle = \"The areas in thousands of square miles of the landmasses \\nwhich exceed 10,000 square miles.\",\n       x = \"Area, log10(sq.mile)\", y = NULL) +\n  theme_minimal()\n\n\n\n\n\n\n\n\nGood job! 👍\n\nEND OF POST"
  },
  {
    "objectID": "posts/nb_001/index.html",
    "href": "posts/nb_001/index.html",
    "title": "Bar Plot with HairEyeColor",
    "section": "",
    "text": "In this blog post, we’ll cover how to plot a bar plot with ggplot2. Bar plots are one of the most popular graphs because they can convey meaning simply and intuitively."
  },
  {
    "objectID": "posts/nb_001/index.html#initilize",
    "href": "posts/nb_001/index.html#initilize",
    "title": "Bar Plot with HairEyeColor",
    "section": "Initilize",
    "text": "Initilize\nI usually use the following code for initialization. If you don’t want to remove plots and/or variables, you can skip it.\n\ngraphics.off()\nrm(list = ls())\ngc()\n\n          used (Mb) gc trigger (Mb) limit (Mb) max used (Mb)\nNcells  577964 30.9    1316624 70.4         NA   669402 35.8\nVcells 1057132  8.1    8388608 64.0      16384  1851791 14.2\n\n\n\nversion\n\n               _                           \nplatform       aarch64-apple-darwin20      \narch           aarch64                     \nos             darwin20                    \nsystem         aarch64, darwin20           \nstatus                                     \nmajor          4                           \nminor          3.1                         \nyear           2023                        \nmonth          06                          \nday            16                          \nsvn rev        84548                       \nlanguage       R                           \nversion.string R version 4.3.1 (2023-06-16)\nnickname       Beagle Scouts"
  },
  {
    "objectID": "posts/nb_001/index.html#load-useful-library",
    "href": "posts/nb_001/index.html#load-useful-library",
    "title": "Bar Plot with HairEyeColor",
    "section": "Load Useful Library",
    "text": "Load Useful Library\nWe want to use as few packages (some might call them “libraries”) as possible. If possible, I’m going to use only the tidyverse package. Tidyverse is one of the most famous packages in R programming, and it’s really powerful and useful.\nsclales is a popular package in R that helps you convert values easily. It is also compatible with ggplot, which is a great help for visualization.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(scales)\n\n\nAttaching package: 'scales'\n\nThe following object is masked from 'package:purrr':\n\n    discard\n\nThe following object is masked from 'package:readr':\n\n    col_factor"
  },
  {
    "objectID": "posts/nb_001/index.html#select-dataset",
    "href": "posts/nb_001/index.html#select-dataset",
    "title": "Bar Plot with HairEyeColor",
    "section": "Select Dataset",
    "text": "Select Dataset\nWhen I write posts in my blog, I use the built-in dataset because I don’t want the reader to suffer by having to find the data from somewhere else.\nThe dataset I’ll be using in this post is shown below ⬇️ .\n\nHair and Eye Color of Statistics Students\n\nDescription\nDistribution of hair and eye color and sex in 592 statistics students.\n\n\nUsage\nHairEyeColor\n\n\nFormat\nA 3-dimensional array resulting from cross-tabulating 592 observations on 3 variables. The variables and their levels are as follows:\nNo Name Levels 1 Hair Black, Brown, Red, Blond 2 Eye Brown, Blue, Hazel, Green 3 Sex Male, Female\n\n\nDetails\nThe Hair x Eye table comes from a survey of students at the University of Delaware reported by Snee (1974). The split by Sex was added by Friendly (1992a) for didactic purposes.\nThis data set is useful for illustrating various techniques for the analysis of contingency tables, such as the standard chi-squared test or, more generally, log-linear modelling, and graphical methods such as mosaic plots, sieve diagrams or association plots.\n\nI use the head() function to quickly see what data is in a data set. The HarEyeColor dataset is a three-dimensional table, as mentioned above.\n\n\n\n\n\n\nNote\n\n\n\nWhen I asked Bing what the difference was between a table and a data frame, they told me as below;\nBing’s answer: A table is a two-dimensional object that stores data in rows and columns, while a data frame is a collection of one-dimensional vectors that can have different data types and can mimic a table. A data frame is a term that comes from R, a programming language for data analysis. A data.table is a special type of data frame that has more features and faster performance.\n\n\n\nhead(HairEyeColor)\n\n, , Sex = Male\n\n       Eye\nHair    Brown Blue Hazel Green\n  Black    32   11    10     3\n  Brown    53   50    25    15\n  Red      10   10     7     7\n  Blond     3   30     5     8\n\n, , Sex = Female\n\n       Eye\nHair    Brown Blue Hazel Green\n  Black    36    9     5     2\n  Brown    66   34    29    14\n  Red      16    7     7     7\n  Blond     4   64     5     8\n\n\n\nConverting to a data frame is better for manipulating data in R. Try to convert table into data frame using as.data.frame.table() or as.data.frame() then store into the df variable.\n\ndf &lt;- as.data.frame.table(HairEyeColor)\ndf |&gt; head()\n\n   Hair   Eye  Sex Freq\n1 Black Brown Male   32\n2 Brown Brown Male   53\n3   Red Brown Male   10\n4 Blond Brown Male    3\n5 Black  Blue Male   11\n6 Brown  Blue Male   50"
  },
  {
    "objectID": "posts/nb_001/index.html#visualization",
    "href": "posts/nb_001/index.html#visualization",
    "title": "Bar Plot with HairEyeColor",
    "section": "Visualization",
    "text": "Visualization\nIf you were to draw a bar plot to visualize a dataset such as HairEyeColor, you would probably draw a plot like the one below.\nI’ve plotted a bar plot with men and women represented by different colors and separated by hair color using facet_wrap().\nIf we just plotted a bar plot, it would be hard to tell the exact values, so we used geom_text() to display the values above each bar. If you want to use geom_text() to display the values, be sure to write label = “the value you want to display” in aes() of ggplot().\n\ndf |&gt; \n  ggplot(aes(x = Eye, y = Freq, fill = Sex, label = Freq)) +\n  geom_col(alpha = 0.8, position = \"dodge\") +\n  geom_text(aes(color = Sex, group = Sex), position = position_dodge(width = 1), vjust = -0.1, show.legend = FALSE) +\n  labs(x = \"Eye Color\", y = \"Frequency\") +\n  facet_wrap(~ Hair, strip.position = c(\"right\")) +\n  scale_y_continuous(limits = c(0,80), breaks = seq(0,80,20)) +\n  theme_bw()\n\n\n\n\n\n\n\n\n\nSometimes you want to highlight certain values in a bar graph. For example, if you want to highlight the eye colors that have the most of each in the hair color facet, the following code might be one of the appropriate answers.\nYou can also use ggplot extensions (such as gghighlight), but I only used the ggplot internal functions. The point is that we create one more column called “Chk” and fill it with different colors based on the value of “Chk”.\nThis method is fairly simple, but very useful for displaying specific values without affecting the original dataset (no transformations).\nEspecially when you have a large number of values to represent and a large number of bars, you can emphasize the message you want by representing certain values with a different color that stands out.\n\ndf |&gt; \n  group_by(Hair) |&gt; \n  mutate(Chk = max(Freq) == Freq) |&gt; \n  ggplot(aes(x = Eye, y = Freq, label = Freq, group = Sex)) +\n  geom_col(aes(fill = Chk), color = \"white\", alpha = 0.8, position = \"dodge\", show.legend = FALSE) +\n  geom_text(aes(color = Chk, group = Sex), position = position_dodge(width = 1), vjust = -0.1, show.legend = FALSE) +\n  labs(title = \"Hair and Eye Color of Statistics Students\",\n       subtitle = \"Distribution of hair and eye color and sex in 592 statistics students.\", \n       x = \"Eye Color\", y = \"Frequency\") +\n  facet_wrap(~ Hair, strip.position = c(\"right\")) +\n  scale_y_continuous(limits = c(0,80), breaks = seq(0,80,20)) +\n  scale_fill_manual(values = c(\"gray80\",\"coral\")) +\n  scale_color_manual(values = c(\"gray80\", \"coral\")) +\n  theme_bw()\n\n\n\n\n\n\n\n\n\nWhen creating a bar plot and adding labels, sometimes you need to include both absolute values and percentages (%).\nThis code shows what to do in such situations. There are two ways to do this, I’ve used the scales package in the code below, and I’ve commented out the other way of calculating the % value and then adding the “%” symbol. Either way is your choice.\n\ndf |&gt; \n  filter(Sex == \"Male\") |&gt; \n  group_by(Hair) |&gt; \n  mutate(Ratio = Freq / sum(Freq)) |&gt; \n  ggplot(aes(x = Eye, y = Freq, fill = Hair, label = Ratio)) +\n  geom_col(alpha = 0.8) +\n  # geom_text(aes(label = paste(round(Ratio*100,1), \"%\"), color = Hair), vjust = -0.1) +\n  geom_text(aes(label = paste0(scales::percent(round(Ratio,3)),\"\\n\",\"(\",Freq,\")\"), color = Hair), \n            vjust = -0.2, hjust = 0.5, show.legend = FALSE) +\n  labs(title = \"Hair and Eye Color of Statistics Students\",\n       subtitle = \"Distribution of hair and eye color and sex in 592 statistics students.\", \n       x = \"Eye Color\", y = \"Frequency\") +\n  facet_wrap(~ Hair, strip.position = c(\"right\")) +\n  scale_y_continuous(limits = c(0,80), breaks = seq(0,80,20)) +\n  theme_bw()\n\n\n\n\n\n\n\n\n\nAnother option is to overlay a line plot on top of a bar chart, which sometimes makes for a great visualization. Actually it’s not really necessary for this data set, but if you wanted to show changes over time, a line plot like the one below would be very helpful for readers to understand.\nI think this is an example of how ggplot is a powerful visualization tool. 👍\n\n\n\n\n\n\nTip\n\n\n\nAs you can see, when I draw a point, I draw two points for one value. This is to make it look better, so I draw one large point in white and the other smaller one in the same color as the bar. This work makes the distinction between a bar and a point clearer and helps the reader understand the trend of the line more easily.\n\n\n\ndf |&gt; \n  filter(Sex == \"Female\") |&gt; \n  ggplot(aes(x = Eye, y = Freq, fill = Hair, label = Freq)) +\n  geom_col(alpha = 0.8) +\n  geom_point(color = \"white\", size = 4, show.legend = FALSE) +\n  geom_point(aes(color = Hair), size = 2, show.legend = FALSE) +\n  geom_path(aes(group = Hair, color = Hair), lty = 2, linewidth = 1, show.legend = FALSE) +\n  geom_text(aes(color = Hair), vjust = -1.0, show.legend = FALSE) +\n  labs(title = \"Hair and Eye Color of Statistics Students\",\n       subtitle = \"Distribution of hair and eye color and sex in 592 statistics students.\", \n       x = \"Eye Color\", y = \"Frequency\") +\n  facet_wrap(~ Hair) +\n  scale_y_continuous(limits = c(0,80), breaks = seq(0,80,20)) +\n  theme_bw()\n\n\n\n\n\n\n\n\n\n\nEND OF POST"
  },
  {
    "objectID": "posts/nb_008/index.html",
    "href": "posts/nb_008/index.html",
    "title": "Pyramid plot with ToothGrowth",
    "section": "",
    "text": "Today I’m gonna make pyramid plot. Typically this plot use comparing two classes at the same time. Maybe you guys saw pyramid plot comparing male and female population by age.\nanyway, there is good blog post what pyramid plot. See the Kawn’s blog 👍"
  },
  {
    "objectID": "posts/nb_008/index.html#initializing",
    "href": "posts/nb_008/index.html#initializing",
    "title": "Pyramid plot with ToothGrowth",
    "section": "Initializing",
    "text": "Initializing\nI usually use the following code for initialization. If you don’t want to remove plots and/or variables, you can skip it.\n\ngraphics.off()\nrm(list = ls())\ngc()\n\n          used (Mb) gc trigger (Mb) limit (Mb) max used (Mb)\nNcells  733617 39.2    1272932   68         NA  1272932 68.0\nVcells 1296773  9.9    8388608   64      16384  1899699 14.5\n\n\n\nversion\n\n               _                           \nplatform       aarch64-apple-darwin20      \narch           aarch64                     \nos             darwin20                    \nsystem         aarch64, darwin20           \nstatus                                     \nmajor          4                           \nminor          3.1                         \nyear           2023                        \nmonth          06                          \nday            16                          \nsvn rev        84548                       \nlanguage       R                           \nversion.string R version 4.3.1 (2023-06-16)\nnickname       Beagle Scouts"
  },
  {
    "objectID": "posts/nb_008/index.html#loading-useful-library",
    "href": "posts/nb_008/index.html#loading-useful-library",
    "title": "Pyramid plot with ToothGrowth",
    "section": "Loading Useful Library",
    "text": "Loading Useful Library\nWe want to use as few packages (some might call them “libraries”) as possible. If possible, I’m going to use only the tidyverse package. Tidyverse is one of the most famous packages in R programming, and it’s really powerful and useful.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors"
  },
  {
    "objectID": "posts/nb_008/index.html#select-dataset",
    "href": "posts/nb_008/index.html#select-dataset",
    "title": "Pyramid plot with ToothGrowth",
    "section": "Select Dataset",
    "text": "Select Dataset\nWhen I write posts in my blog, I use the built-in dataset because I don’t want the reader to suffer by having to find the data from somewhere else.\nThe dataset I’ll be using in this post is shown below ⬇️ ⬇️ ⬇️.\n\nThe Effect of Vitamin C on Tooth Growth in Guinea Pigs\nDescription The response is the length of odontoblasts (cells responsible for tooth growth) in 60 guinea pigs. Each animal received one of three dose levels of vitamin C (0.5, 1, and 2 mg/day) by one of two delivery methods, orange juice or ascorbic acid (a form of vitamin C and coded as VC).\nUsage\nToothGrowth\nFormat\nA data frame with 60 observations on 3 variables.\n[,1] len numeric Tooth length.\n[,2] supp factor Supplement type (VC or OJ).\n[,3] dose numeric Dose in milligrams/day.\nSource\nC. I. Bliss (1952). The Statistics of Bioassay. Academic Press.\nReferences\nMcNeil, D. R. (1977). Interactive Data Analysis. New York: Wiley.\nCrampton, E. W. (1947). The growth of the odontoblast of the incisor teeth as a criterion of vitamin C intake of the guinea pig. The Journal of Nutrition, 33(5), 491–504. doi:10.1093/jn/33.5.491.\n\nToothGrowth |&gt; head()\n\n   len supp dose\n1  4.2   VC  0.5\n2 11.5   VC  0.5\n3  7.3   VC  0.5\n4  5.8   VC  0.5\n5  6.4   VC  0.5\n6 10.0   VC  0.5\n\n\nToothGrowth dataset is typical dataframe object.\n\nToothGrowth |&gt; class()\n\n[1] \"data.frame\"\n\n\nand ToothGrowth is 60 rows and 3 columns.\n\nToothGrowth |&gt; dim()\n\n[1] 60  3"
  },
  {
    "objectID": "posts/nb_008/index.html#visualization",
    "href": "posts/nb_008/index.html#visualization",
    "title": "Pyramid plot with ToothGrowth",
    "section": "Visualization",
    "text": "Visualization\nI saved ToothGrowth dataset into df variable.\n\ndf &lt;- ToothGrowth\n\ntry to make a simple histogram\n\nhist(df$len, main = \"Using native hist() function\")\n\n\n\n\n\n\n\n\nall right! Now I’d like to make a histogram using ggplot.\nNative-R hist() function shows 7 bars(= bins), so I define there are 7 bins in histogram.\nI got it as below.\n\ndf |&gt; \n  ggplot(aes(len)) + \n  geom_histogram(bins = 7, fill = \"gray80\", color = \"black\")\n\n\n\n\n\n\n\n\nIn ToothGrowth dataset, there are 2(two) kind of supplement - Vitamin C or Orange Juice.\nIf I need to compare tooth growth by supplement type, I would make a histogram like this.\n\ndf |&gt; \n  ggplot(aes(len)) +\n  geom_histogram(bins = 7, fill = \"gray80\", color = \"black\") +\n  facet_wrap(vars(supp))\n\n\n\n\n\n\n\n\nor…\n\ndf |&gt; \n  ggplot(aes(len, fill = supp)) +\n  geom_histogram(bins = 7, position = \"dodge\")\n\n\n\n\n\n\n\n\nIt’s too difficult to compare each other.\nUse coord_flip() to flip the coordinates, then draw one (vitamin C) facing left and the other (orange juice) facing right.\nThe two histograms drawn with their backs to each other produce a pyramid plot.\nThe key is that we used after_stat(count) to make the values with a certain value (vitamin C) negative.\n\n\n\n\n\n\nTip\n\n\n\nIf you keep 7 bins in plot, there are some blank area. for example, Orange Juice(OJ) has no tooth length over 30.9.\nWe don’t need compare this kind of data.\nSo I’ll reduce number of bins 7 to 5.\n\n\n\ndf |&gt; \n  ggplot(aes(len, fill = supp)) +\n  geom_histogram(data = subset(df, supp == \"OJ\"), bins = 5) +\n  geom_histogram(data = subset(df, supp == \"VC\"), aes(y = after_stat(count)*-1), bins = 5) +\n  coord_flip()\n\n\n\n\n\n\n\n\nNow, all most done.\nI’ll add title and necessary decoration in the plot.\nI finally pyramid plot.\n\ndf |&gt; \n  ggplot(aes(len, fill = supp)) +\n  geom_histogram(data = subset(df, supp == \"OJ\"), bins = 5, fill = \"midnightblue\", color = \"white\") +\n  geom_histogram(data = subset(df, supp == \"VC\"), aes(y = after_stat(count)*-1), bins = 5, fill = \"darkred\", color = \"white\") +\n  coord_flip() +\n  scale_y_continuous(limits = c(-15, 15), breaks = seq(-15, 15, 5), labels = abs(seq(-15, 15, 5))) +\n  labs(title = \"The Effect of Vitamin C on Tooth Growth in Guinea Pigs\",\n       subtitle = \"The response is the length of odontoblasts (cells responsible for tooth growth) in 60 guinea pigs. \\n Each animal received one of three dose levels of vitamin C (0.5, 1, and 2 mg/day) \\n by one of two delivery methods, orange juice or ascorbic acid (a form of vitamin C \\n and coded as VC).\",\n       x = \"Count\", y = \"Tooth length\", fill = \"Supplement type (VC or OJ)\") +\n  theme_bw() +\n  theme(legend.position = \"bottom\")\n\n\n\n\n\n\n\n\nGood job! 👍\n\nEND OF POST"
  },
  {
    "objectID": "posts/nb_006/index.html",
    "href": "posts/nb_006/index.html",
    "title": "Line plot with CO2",
    "section": "",
    "text": "In this blog post, I made line plot with CO2 dataset. CO2 dataset is groupedData. It’s very useful object when you make complicated dataset with formula."
  },
  {
    "objectID": "posts/nb_006/index.html#initializing",
    "href": "posts/nb_006/index.html#initializing",
    "title": "Line plot with CO2",
    "section": "Initializing",
    "text": "Initializing\nI usually use the following code for initialization. If you don’t want to remove plots and/or variables, you can skip it.\n\ngraphics.off()\nrm(list = ls())\ngc()\n\n          used (Mb) gc trigger (Mb) limit (Mb) max used (Mb)\nNcells  578501 30.9    1318222 70.5         NA   669274 35.8\nVcells 1059505  8.1    8388608 64.0      16384  1851504 14.2\n\n\n\nversion\n\n               _                           \nplatform       aarch64-apple-darwin20      \narch           aarch64                     \nos             darwin20                    \nsystem         aarch64, darwin20           \nstatus                                     \nmajor          4                           \nminor          3.1                         \nyear           2023                        \nmonth          06                          \nday            16                          \nsvn rev        84548                       \nlanguage       R                           \nversion.string R version 4.3.1 (2023-06-16)\nnickname       Beagle Scouts"
  },
  {
    "objectID": "posts/nb_006/index.html#loading-useful-library",
    "href": "posts/nb_006/index.html#loading-useful-library",
    "title": "Line plot with CO2",
    "section": "Loading Useful Library",
    "text": "Loading Useful Library\nWe want to use as few packages (some might call them “libraries”) as possible. If possible, I’m going to use only the tidyverse package. Tidyverse is one of the most famous packages in R programming, and it’s really powerful and useful.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors"
  },
  {
    "objectID": "posts/nb_006/index.html#select-dataset",
    "href": "posts/nb_006/index.html#select-dataset",
    "title": "Line plot with CO2",
    "section": "Select Dataset",
    "text": "Select Dataset\nWhen I write posts in my blog, I use the built-in dataset because I don’t want the reader to suffer by having to find the data from somewhere else.\nThe dataset I’ll be using in this post is shown below ⬇️ .\n\nCarbon Dioxide Uptake in Grass Plants\n\nDescription\nThe CO2 data frame has 84 rows and 5 columns of data from an experiment on the cold tolerance of the grass species Echinochloa crus-galli.\n\n\nUsage\nCO2\n\n\nFormat\nAn object of class c(“nfnGroupedData”, “nfGroupedData”, “groupedData”, “data.frame”) containing the following columns:\nPlant an ordered factor with levels Qn1 &lt; Qn2 &lt; Qn3 &lt; … &lt; Mc1 giving a unique identifier for each plant.\nType a factor with levels Quebec Mississippi giving the origin of the plant\nTreatment a factor with levels nonchilled chilled\nconc a numeric vector of ambient carbon dioxide concentrations (mL/L).\nuptake a numeric vector of carbon dioxide uptake rates (\\(\\mu\\)mol/\\(m^2\\)sec).\n\n\nDetails\nThe \\(CO_2\\) uptake of six plants from Quebec and six plants from Mississippi was measured at several levels of ambient \\(CO_2\\) concentration. Half the plants of each type were chilled overnight before the experiment was conducted.\nThis dataset was originally part of package nlme, and that has methods (including for [, as.data.frame, plot and print) for its grouped-data classes.\nTake a look the CO2 dataset.\nAs I said before, CO2 is groupedData (also dataframe). so its description show nfnGrpdD.\n\nCO2 |&gt; head()\n\n  Plant   Type  Treatment conc uptake\n1   Qn1 Quebec nonchilled   95   16.0\n2   Qn1 Quebec nonchilled  175   30.4\n3   Qn1 Quebec nonchilled  250   34.8\n4   Qn1 Quebec nonchilled  350   37.2\n5   Qn1 Quebec nonchilled  500   35.3\n6   Qn1 Quebec nonchilled  675   39.2\n\n\nCO2 dataset has several attributes as followings;\n\nCO2 |&gt; class()\n\n[1] \"nfnGroupedData\" \"nfGroupedData\"  \"groupedData\"    \"data.frame\"    \n\n\nand CO2 is 84 rows and 5 columns. it very tiny.\n\nCO2 |&gt; dim()\n\n[1] 84  5"
  },
  {
    "objectID": "posts/nb_006/index.html#visualization",
    "href": "posts/nb_006/index.html#visualization",
    "title": "Line plot with CO2",
    "section": "Visualization",
    "text": "Visualization\nbefore make plot, I’d like to know how many kind of Plant in CO2.\nif there are too many kind of Plant, I can’t make plots at once. It might be too hard to read even I made plot.\n\nunique(CO2[,1:3])\n\n   Plant        Type  Treatment\n1    Qn1      Quebec nonchilled\n8    Qn2      Quebec nonchilled\n15   Qn3      Quebec nonchilled\n22   Qc1      Quebec    chilled\n29   Qc2      Quebec    chilled\n36   Qc3      Quebec    chilled\n43   Mn1 Mississippi nonchilled\n50   Mn2 Mississippi nonchilled\n57   Mn3 Mississippi nonchilled\n64   Mc1 Mississippi    chilled\n71   Mc2 Mississippi    chilled\n78   Mc3 Mississippi    chilled\n\n\nGreat! There are 12 types of plants in total.\nThis is the essential information I need to know to plot ahead.\nIf I plot with plot() function, it will appear like below.\n\nplot(formula = uptake ~ conc,\n     data = CO2,\n     type = \"p\", \n     main = \"Carbon Dioxide Uptake in Grass Plants\")\n\n\n\n\n\n\n\n\nOf course, it is also possible to draw a plot classified by Plant using only the native functions, as shown in the steps below.\nHowever, using ggplot2 is a much simpler and faster way to create beautiful plot.\n\n# Split the dataset by the \"Plant\" factor\nsplit_data &lt;- split(CO2, CO2$Plant)\n\n# Set the number of rows and columns in the grid\nnum_rows &lt;- 3\nnum_cols &lt;- 4\n\n# Create separate scatterplots for each plant\npar(mfrow = c(num_rows, num_cols))\n\n# Get the names of the plants\nplant_names &lt;- names(split_data)\n\n# Loop through each plant and create a scatterplot\nfor (i in 1:min(length(plant_names), num_rows * num_cols)) {\n  plant_data &lt;- split_data[[plant_names[i]]]\n  \n  # Create the scatterplot with points and lines connecting them\n  plot(uptake ~ conc, data = plant_data, \n       main = plant_names[i],\n       xlab = \"Concentration\", ylab = \"CO2 Uptake\",\n       col = \"blue\", pch = 16)  # pch = 16 specifies point shape\n  \n  lines(uptake ~ conc, data = plant_data, col = \"blue\")  # Add lines connecting points\n  grid() # Add grid each plot\n}\n\n# Add the common plot title at the top of the entire grid\nmtext(\"Carbon Dioxide Uptake in Grass Plants\", side = 3, line = -1.5, outer = TRUE, cex = 1.2)\n\n\n\n\n\n\n\n# Reset the plotting parameters\npar(mfrow = c(1, 1))\n\nNow, I start to make plot with ggplot! 📈\nthis is very simple dot plot. almost same as result of base::plot().\n\nCO2 |&gt; \n  ggplot(aes(conc, uptake)) +\n  geom_point()\n\n\n\n\n\n\n\n\nTo make it easier for readers to understand, I drew a plot for each of the 12 plant species with lines connecting the dots.\nIt’s easier to understand than the previous plot, but I still see areas for improvement.\n\nCO2 |&gt; \n  ggplot(aes(conc, uptake)) +\n  geom_path() +\n  geom_point(shape = 21, fill = \"white\", color = \"black\") +\n  facet_wrap(vars(Plant), nrow = 1)\n\n\n\n\n\n\n\n\nI created the first plot below to give the reader an idea of what to expect. The plots for each of the 12 plants are arranged side-by-side and have the same y scale to make them easier to compare.\nThe label values on the x-axis were rotated 90 degrees to avoid overlapping letters, making it easier for readers to read the numbers.\n\nCO2 |&gt; \n  ggplot(aes(conc, uptake, color = Plant)) +\n  geom_path(show.legend = FALSE) +\n  geom_point(aes(color = Plant), shape = 21, fill = \"white\", show.legend = FALSE) +\n  facet_wrap(vars(Plant), nrow = 1) +\n  scale_x_continuous(limits = c(0,1200), breaks = seq(0,1200,400)) +\n  labs(title = \"Carbon Dioxide Uptake in Grass Plants\",\n       subtitle = paste0(\"The CO2 data frame has 84 rows and 5 columns of data from an experiment on the cold tolerance\",\"\\n\" ,\n                         \"of the grass species Echinochloa crus-galli.\"),\n       x = \"Ambient carbon dioxide concentrations (mL/L)\",\n       y = \"Carbon dioxide uptake rates (umol/sq.m sec)\",\n       color = \"Legend\") +\n  theme_bw() +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))\n\n\n\n\n\n\n\n\nThis time, I plotted a different version of line plot. This plot is a useful way to show a specific value in a spaghetti plot with a lot of data jumbled together.\nThe package gghighlight makes it very easy to do this 👍, but I sometimes use the above method of plotting using ggplot’s layers instead of using the gghighlight package.\nThe key to plotting with ggplot’s layer method is to use the subset() function. This is a very useful tip because it allows you to highlight one or more graphs.\nBoth methods are great, so it’s a matter of preference.\n\nCO2 |&gt; \n  ggplot(aes(conc, uptake, group = Plant, label = Plant)) +\n  # path color sets by color name then determine color in scale_color_manual()\n  geom_path(data = subset(CO2, Plant != \"Mn1\"), aes(color = \"Others\"), linewidth = 1, lty = 2) +\n  geom_path(data = subset(CO2, Plant == \"Mn1\"), aes(color = \"Mn1\"), linewidth = 1, lty = 1) +\n  # point color determines in geom_point() directly\n  geom_point(data = subset(CO2, Plant != \"Mn1\"), shape = 21, fill = \"white\", color = \"gray\") +\n  geom_point(data = subset(CO2, Plant == \"Mn1\"), shape = 21, fill = \"white\", color = \"coral\") +\n  scale_color_manual(values = c(\"Others\" = \"gray80\",\"Mn1\" = \"coral\")) +\n  labs(title = \"Carbon Dioxide Uptake in Grass Plants\",\n       subtitle = paste0(\"The CO2 data frame has 84 rows and 5 columns of data from an experiment on the cold tolerance\",\"\\n\" ,\n                         \"of the grass species Echinochloa crus-galli.\"),\n       x = \"Ambient carbon dioxide concentrations (mL/L)\",\n       y = \"Carbon dioxide uptake rates (umol/sq.m sec)\",\n       color = \"Legend\") +\n  theme_bw() + \n  theme(legend.position = c(0.9, 0.15), # Caution!!! it is relative position ex) 0: left end ~ 1: right end\n        legend.background = element_rect(fill = \"white\"),\n        legend.box.background = element_rect(color = \"black\"))\n\n\n\n\n\n\n\n\nThis time, we want to plot the classification of plants according to their macroclassification (Mc, Mn, Qc, Qn).\nTo do this, we first create a column called category using the mutate() function and put in the values that define the major classifications of plants.\n\ndf &lt;- \n  CO2 |&gt; \n  mutate(category = case_when(str_detect(Plant, \"Qn\") ~ \"Qn\",\n                              str_detect(Plant, \"Qc\") ~ \"Qc\",\n                              str_detect(Plant, \"Mn\") ~ \"Mn\",\n                              str_detect(Plant, \"Mc\") ~ \"Mc\",\n                              .default = \"Unknown\"))\ndf |&gt; head()\n\n  Plant   Type  Treatment conc uptake category\n1   Qn1 Quebec nonchilled   95   16.0       Qn\n2   Qn1 Quebec nonchilled  175   30.4       Qn\n3   Qn1 Quebec nonchilled  250   34.8       Qn\n4   Qn1 Quebec nonchilled  350   37.2       Qn\n5   Qn1 Quebec nonchilled  500   35.3       Qn\n6   Qn1 Quebec nonchilled  675   39.2       Qn\n\n\nI have colored them according to the Plant category because if we colored them according to the Plant taxonomy, they would be indistinguishable.\nThe rest of the plot is the same as the previous plot.\n\ndf |&gt; \n  ggplot(aes(conc, uptake, color = Plant)) +\n  geom_path(show.legend = FALSE) +\n  geom_point(aes(color = Plant), shape = 21, fill = \"white\", show.legend = FALSE) +\n  facet_wrap(vars(category), nrow = 1) +\n  labs(title = \"Carbon Dioxide Uptake in Grass Plants\",\n       subtitle = paste0(\"The CO2 data frame has 84 rows and 5 columns of data from an experiment on the cold tolerance\",\"\\n\" ,\n                         \"of the grass species Echinochloa crus-galli.\"),\n       x = \"Ambient carbon dioxide concentrations (mL/L)\",\n       y = \"Carbon dioxide uptake rates (umol/sq.m sec)\",\n       color = \"Legend\") +\n  theme_bw()\n\n\n\n\n\n\n\n\nWhen plotting as above, it is sometimes uncomfortable to see a lot of items in the legend.\nOr, you may want to show each piece of data in a single plot.\nIn either case, the solution is to break it down into smaller plots with appropriate zones. Like the one I created earlier with the native plot() function, I can display 12 small plots in a 4X3 array as shown below, and you can see that the code has become very simple and straightforward.\n\ndf |&gt; \n  ggplot(aes(conc, uptake, color = Plant)) +\n  geom_path(show.legend = FALSE) +\n  geom_point(aes(color = Plant), shape = 21, fill = \"white\", show.legend = FALSE) +\n  facet_wrap(vars(category, Plant), ncol = 4, dir = \"v\", labeller = labeller(.multi_line = FALSE)) +\n  labs(title = \"Carbon Dioxide Uptake in Grass Plants\",\n       subtitle = paste0(\"The CO2 data frame has 84 rows and 5 columns of data from an experiment on the cold tolerance\",\"\\n\" ,\n                         \"of the grass species Echinochloa crus-galli.\"),\n       x = \"Ambient carbon dioxide concentrations (mL/L)\",\n       y = \"Carbon dioxide uptake rates (umol/sq.m sec)\",\n       color = \"Legend\") +\n  theme_bw()\n\n\n\n\n\n\n\n\nI’ve plotted four different line plots in this blog post, which can be broadly divided into two categories.\nLine plots are likely to look cluttered when plotted on a single plot, so it’s important to keep them as simple as possible.\n\nEND OF POST"
  },
  {
    "objectID": "posts/nb_007/index.html",
    "href": "posts/nb_007/index.html",
    "title": "Column plot with World’s Telephones",
    "section": "",
    "text": "In this blog post,I’ll make a simple column plot. A characteristic feature is that the values in the data have a large variance, which makes it difficult to compare them to each other. ggplot has a facet_wrap() function (or facet_grid()) for this purpose.\nIn fact, a tile plot would be more appropriate in this case, but to keep the example as simple as possible, I’ll plot without any data manipulation."
  },
  {
    "objectID": "posts/nb_007/index.html#initializing",
    "href": "posts/nb_007/index.html#initializing",
    "title": "Column plot with World’s Telephones",
    "section": "Initializing",
    "text": "Initializing\nI usually use the following code for initialization. If you don’t want to remove plots and/or variables, you can skip it.\n\ngraphics.off()\nrm(list = ls())\ngc()\n\n          used (Mb) gc trigger (Mb) limit (Mb) max used (Mb)\nNcells  578546 30.9    1318351 70.5         NA   669274 35.8\nVcells 1057758  8.1    8388608 64.0      16384  1851504 14.2\n\n\n\nversion\n\n               _                           \nplatform       aarch64-apple-darwin20      \narch           aarch64                     \nos             darwin20                    \nsystem         aarch64, darwin20           \nstatus                                     \nmajor          4                           \nminor          3.1                         \nyear           2023                        \nmonth          06                          \nday            16                          \nsvn rev        84548                       \nlanguage       R                           \nversion.string R version 4.3.1 (2023-06-16)\nnickname       Beagle Scouts"
  },
  {
    "objectID": "posts/nb_007/index.html#loading-useful-library",
    "href": "posts/nb_007/index.html#loading-useful-library",
    "title": "Column plot with World’s Telephones",
    "section": "Loading Useful Library",
    "text": "Loading Useful Library\nWe want to use as few packages (some might call them “libraries”) as possible. If possible, I’m going to use only the tidyverse package. Tidyverse is one of the most famous packages in R programming, and it’s really powerful and useful.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors"
  },
  {
    "objectID": "posts/nb_007/index.html#select-dataset",
    "href": "posts/nb_007/index.html#select-dataset",
    "title": "Column plot with World’s Telephones",
    "section": "Select Dataset",
    "text": "Select Dataset\nWhen I write posts in my blog, I use the built-in dataset because I don’t want the reader to suffer by having to find the data from somewhere else.\nThe dataset I’ll be using in this post is shown below ⬇️ ⬇️ ⬇️.\n\nThe World’s Telephones\nDescription The number of telephones in various regions of the world (in thousands)\nUsage WorldPhones\nFormat A matrix with 7 rows and 8 columns. The columns of the matrix give the figures for a given region, and the rows the figures for a year.\nThe regions are: North America, Europe, Asia, South America, Oceania, Africa, Central America.\nThe years are: 1951, 1956, 1957, 1958, 1959, 1960, 1961.\nSource AT&T (1961) The World’s Telephones.\nReferences McNeil, D. R. (1977) Interactive Data Analysis. New York: Wiley.\n\nWorldPhones |&gt; head()\n\n     N.Amer Europe Asia S.Amer Oceania Africa Mid.Amer\n1951  45939  21574 2876   1815    1646     89      555\n1956  60423  29990 4708   2568    2366   1411      733\n1957  64721  32510 5230   2695    2526   1546      773\n1958  68484  35218 6662   2845    2691   1663      836\n1959  71799  37598 6856   3000    2868   1769      911\n1960  76036  40341 8220   3145    3054   1905     1008\n\n\nWorldPhones dataset has several attributes as followings;\n\nWorldPhones |&gt; class()\n\n[1] \"matrix\" \"array\" \n\n\nand WorldPhones is 7 rows and 7 columns. it super tiny.\n\nWorldPhones |&gt; dim()\n\n[1] 7 7"
  },
  {
    "objectID": "posts/nb_007/index.html#visualization",
    "href": "posts/nb_007/index.html#visualization",
    "title": "Column plot with World’s Telephones",
    "section": "Visualization",
    "text": "Visualization\noops, autoplot in ggplot does not support matrix object. there is lots of way to plot the matrix data.\nbut I want to use ggplot and tidyverse eco-system, so I’ll convert matrix to dataframe.\nit’s quite easy.\n\ndf_base &lt;- as.data.frame(WorldPhones)\n\n\nhead(df_base)\n\n     N.Amer Europe Asia S.Amer Oceania Africa Mid.Amer\n1951  45939  21574 2876   1815    1646     89      555\n1956  60423  29990 4708   2568    2366   1411      733\n1957  64721  32510 5230   2695    2526   1546      773\n1958  68484  35218 6662   2845    2691   1663      836\n1959  71799  37598 6856   3000    2868   1769      911\n1960  76036  40341 8220   3145    3054   1905     1008\n\n\nor I can use as_tibble() function.\n\ndf_dplyr &lt;- as_tibble(WorldPhones, rownames = \"Year\")\n\n\nhead(df_dplyr)\n\n# A tibble: 6 × 8\n  Year  N.Amer Europe  Asia S.Amer Oceania Africa Mid.Amer\n  &lt;chr&gt;  &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;   &lt;dbl&gt;  &lt;dbl&gt;    &lt;dbl&gt;\n1 1951   45939  21574  2876   1815    1646     89      555\n2 1956   60423  29990  4708   2568    2366   1411      733\n3 1957   64721  32510  5230   2695    2526   1546      773\n4 1958   68484  35218  6662   2845    2691   1663      836\n5 1959   71799  37598  6856   3000    2868   1769      911\n6 1960   76036  40341  8220   3145    3054   1905     1008\n\n\nboth data frame looks very similar. but there is quite differences between them.\ntake a look dimension of data frame.\nas you can see, data frame which generate with as.data.frame() is smaller than dplyr data frame.\nWHY ❓\ntypically, 1st column of matrix role as name of rows. when I convert matrix to data frame with as.data.frame, name of rows can not include as part of data frame.\nsometimes, we need this data set should include part of data frame.\n\ndim(df_base)\n\n[1] 7 7\n\n\n\ndim(df_dplyr)\n\n[1] 7 8\n\n\nFor the purposes of this post, it is desirable that these rows are recorded as the first row of the data frame because their names refer to the year in which each piece of data was acquired.\nAnyway, I’ll use data frame which generate with as_tibble() from here.\nYear column is character type so I can change it to numeric type if I need.\nSometimes you need to assign date or date_time type on it depends on what will you do.\nbut in this blog post, I think it’s not necessary so I just keep it as a character type.\n\n# df_dplyr &lt;- df_dplyr |&gt; mutate(Year = (as.integer(Year))) # if you want to it makes integer type.\n\ndf_dplyr\n\n# A tibble: 7 × 8\n  Year  N.Amer Europe  Asia S.Amer Oceania Africa Mid.Amer\n  &lt;chr&gt;  &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;   &lt;dbl&gt;  &lt;dbl&gt;    &lt;dbl&gt;\n1 1951   45939  21574  2876   1815    1646     89      555\n2 1956   60423  29990  4708   2568    2366   1411      733\n3 1957   64721  32510  5230   2695    2526   1546      773\n4 1958   68484  35218  6662   2845    2691   1663      836\n5 1959   71799  37598  6856   3000    2868   1769      911\n6 1960   76036  40341  8220   3145    3054   1905     1008\n7 1961   79831  43173  9053   3338    3224   2005     1076\n\n\nI’m going to plot the telephone supply in each continent by year, but the current data format makes it difficult to create the desired plot.\nso I transform data format with pivot_longer() function.\n\ndf &lt;- pivot_longer(df_dplyr, 2:last_col(), names_to = \"Region\", values_to = \"Numbers\")\n\nhead(df,10)\n\n# A tibble: 10 × 3\n   Year  Region   Numbers\n   &lt;chr&gt; &lt;chr&gt;      &lt;dbl&gt;\n 1 1951  N.Amer     45939\n 2 1951  Europe     21574\n 3 1951  Asia        2876\n 4 1951  S.Amer      1815\n 5 1951  Oceania     1646\n 6 1951  Africa        89\n 7 1951  Mid.Amer     555\n 8 1956  N.Amer     60423\n 9 1956  Europe     29990\n10 1956  Asia        4708\n\n\nmuch better! 👍\ntry to make a simple line plot.\n\ndf |&gt; \n  ggplot(aes(Year, Numbers, fill = Region)) + \n  geom_col()\n\n\n\n\n\n\n\n\nor…\n\ndf |&gt; \n  ggplot(aes(Year, Numbers, fill = Region)) + \n  geom_col(position = \"dodge\")\n\n\n\n\n\n\n\n\nThere are some problems to read a line plot. first of all some of data values are too small (or too big), it’s difficult to show change of data properly.\nTypically, we manipulate data value before make plots depends on what you want to give message to readers. “standardization” or “normalization” is one of good example if you want to show change of values by year. “logarithm” also good method to show very large number and relatively small number simultaneously on the same plot.\nYou can search them and what they do. If you have statistic background, you can make better plot.\nI’m going to create the plot in a simple way: I want to show the reader that the number of phones installed per region increases over time.\nOf course, there are a number of statistical data manipulations that can be done, such as the ones we talked about earlier, but for the sake of simplicity, I’ll just use the data as it is.\nSo I used the facet_warp() function to split the plot by region.\n\ndf |&gt; \n  ggplot(aes(Year, Numbers, fill = Region)) + \n  geom_col(show.legend = FALSE) + \n  facet_wrap(vars(Region))\n\n\n\n\n\n\n\n\nAs you might expect, regions with smaller numbers are harder to detect changes in.\nTo help with this, ggplot has an option to scale each faceted plot differently.\nWhen I use facet_warp(), scales argument help to do it.\n\ndf |&gt; \n  ggplot(aes(Year, Numbers, fill = Region)) + \n  geom_col(position = \"dodge\", show.legend = FALSE) + \n  facet_wrap(vars(Region), scales = \"free_y\" )\n\n\n\n\n\n\n\n\nIt looks better 😁.\nI then add extra stuff to decorate this plot.\n\ndf |&gt; \n  ggplot(aes(Year, Numbers, fill = Region)) + \n  geom_col(position = \"dodge\", show.legend = FALSE) + \n  facet_wrap(vars(Region), scales = \"free_y\") +\n  labs(title = \"The World's Telephones\",\n       subtitle = \"The number of telephones in various regions of the world (in thousands)\",\n       x = \"Year\", y = \"Number of Telephone\") +\n  theme_bw() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\n\n\n\n\n\nEND OF POST"
  },
  {
    "objectID": "posts/nb_002/index.html",
    "href": "posts/nb_002/index.html",
    "title": "Bar Plot with morley",
    "section": "",
    "text": "In this post we will plot a bar histogram using data from the Michelson experiment and discuss what colors should be used for colorblind people when plotting a bar histogram. The plots we will create will be visible to colorblind people, so it is important that we visualize them using colors that are easily recognizable by everyone."
  },
  {
    "objectID": "posts/nb_002/index.html#initializing",
    "href": "posts/nb_002/index.html#initializing",
    "title": "Bar Plot with morley",
    "section": "Initializing",
    "text": "Initializing\nI usually use the following code for initialization. If you don’t want to remove plots and/or variables, you can skip it.\n\ngraphics.off()\nrm(list = ls())\ngc()\n\n          used (Mb) gc trigger (Mb) limit (Mb) max used (Mb)\nNcells  578445 30.9    1317998 70.4         NA   669402 35.8\nVcells 1058348  8.1    8388608 64.0      16384  1851791 14.2\n\n\n\nversion\n\n               _                           \nplatform       aarch64-apple-darwin20      \narch           aarch64                     \nos             darwin20                    \nsystem         aarch64, darwin20           \nstatus                                     \nmajor          4                           \nminor          3.1                         \nyear           2023                        \nmonth          06                          \nday            16                          \nsvn rev        84548                       \nlanguage       R                           \nversion.string R version 4.3.1 (2023-06-16)\nnickname       Beagle Scouts"
  },
  {
    "objectID": "posts/nb_002/index.html#loading-useful-library",
    "href": "posts/nb_002/index.html#loading-useful-library",
    "title": "Bar Plot with morley",
    "section": "Loading useful library",
    "text": "Loading useful library\nWe want to use as few packages (some might call them “libraries”) as possible. If possible, I’m going to use only the tidyverse package. Tidyverse is one of the most famous packages in R programming, and it’s really powerful and useful.\nsclales is a popular package in R that helps you convert values easily. It is also compatible with ggplot, which is a great help for visualization.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(scales)\n\n\nAttaching package: 'scales'\n\nThe following object is masked from 'package:purrr':\n\n    discard\n\nThe following object is masked from 'package:readr':\n\n    col_factor"
  },
  {
    "objectID": "posts/nb_002/index.html#select-dataset",
    "href": "posts/nb_002/index.html#select-dataset",
    "title": "Bar Plot with morley",
    "section": "Select Dataset",
    "text": "Select Dataset\nWhen I write posts in my blog, I use the built-in dataset because I don’t want the reader to suffer by having to find the data from somewhere else.\nThe dataset I’ll be using in this post is shown below ⬇️ .\n\nMichelson Speed of Light Data\n\nDescription\nA classical data of Michelson (but not this one with Morley) on measurements done in 1879 on the speed of light. The data consists of five experiments, each consisting of 20 consecutive ‘runs’. The response is the speed of light measurement, suitably coded (km/sec, with 299000 subtracted).\n\n\nUsage\nmorley\n\n\nFormat\nA data frame with 100 observations on the following 3 variables.\nExpt The experiment number, from 1 to 5.\nRun The run number within each experiment.\nSpeed Speed-of-light measurement.\n\n\nDetails\nThe data is here viewed as a randomized block experiment with ‘experiment’ and ‘run’ as the factors. ‘run’ may also be considered a quantitative variate to account for linear (or polynomial) changes in the measurement over the course of a single experiment.\n\nall right! ready to go?\nI took a look dataset with head() function. actually I used %&gt;% pipe operator before, but now I use |&gt; pipe operator.\nMaybe stackoverflow article will be helpful to understand both pipe operator.\n\nmorley |&gt; head()\n\n    Expt Run Speed\n001    1   1   850\n002    1   2   740\n003    1   3   900\n004    1   4  1070\n005    1   5   930\n006    1   6   850\n\n\n\nI wanna find out morley attribute. as you can see, morley dataset is data frame object.\nso I don’t need to change attribute.\n\nclass(morley)\n\n[1] \"data.frame\"\n\n\n\nand using dim() function, I checked how big morley dataset is.\nmorley is tiny dataset having only 100 rows with 3 column 😁.\n\ndim(morley)\n\n[1] 100   3\n\n\n\nFirst, group the morley dataset by experiment (Expt) using group_by() and then use the summarise() function to average the speed of light measured in each experiment.\nIt then stores the result in the df1 variable.\n\ndf1 &lt;- morley |&gt; group_by(Expt) |&gt; summarise(Avg = mean(Speed))\ndf1\n\n# A tibble: 5 × 2\n   Expt   Avg\n  &lt;int&gt; &lt;dbl&gt;\n1     1  909 \n2     2  856 \n3     3  845 \n4     4  820.\n5     5  832."
  },
  {
    "objectID": "posts/nb_002/index.html#visualization",
    "href": "posts/nb_002/index.html#visualization",
    "title": "Bar Plot with morley",
    "section": "Visualization",
    "text": "Visualization\nYou have created a simple bar plot as shown below.\nI can’t see any difference between the five experimental results, all of which are above 750 and around 850.\nSince I can’t clearly see the difference in the plot, I need to adjust the scale of the y-axis so that I can see the difference between the experimental values.\nMoreover, I can’t distinguish which bar stand for which experiment because all bar is gray color.\n\ndf1 |&gt; \n  ggplot(aes(Expt, Avg)) +\n  geom_col()\n\n\n\n\n\n\n\n\n\nHere you are.\nI colored each bar according to the experiment number. One thing to note is that the experiment number is recognized as an integer in the dataset, so if you want to color each one differently, you need to use the as.factor() function to make sure it is recognized as a factor and not an integer.\n\ndf1 |&gt; \n  ggplot(aes(Expt, Avg, fill=as.factor(Expt))) +\n  geom_col()\n\n\n\n\n\n\n\n\n\nA number of color palettes have been developed with the intention of being accessible to people who are colorblind. Three of them appear below, from the IBM Design Library, Bang Wong, and Paul Tol respectively. Click on any of them to load it into the color palette selection tool above.\n\n\n\n\n\n\nNote\n\n\n\nIBM Color Blind Safe Palette\n“#648fff”, “#785ef0”, “#dc267f”, “#fe6100”, “#ffb000”, “#000000”, “#ffffff”\n\n\nIn my case, I made variable then store color for colorblind.\nIt’s a very good practice to have these colors predefined for people with color blindness when creating visualizations.\nI highly recommend it. Alternatively, okabe-ito can achieve the same effect and is easy to use by installing the package.\nWhen you want to use okabe-ito palette in ggplot, you can use ggokabeito.\n\nIBMColor &lt;- c(\"#648fff\", \"#785ef0\", \"#dc267f\", \"#fe6100\", \"#ffb000\")\n\n\ndf1 |&gt; \n  ggplot(aes(Expt, Avg, fill=as.factor(Expt))) +\n  geom_col(show.legend = FALSE) +\n  scale_fill_manual(values = IBMColor)\n\n\n\n\n\n\n\n\n\nNow, I try to zoom the plot to distinguish differences among the experiments.\nfor zooming, I set limits and breaks in sclae_y_continuous().\nHowever, I can’t see anything 😮.\n\ndf1 |&gt; \n  ggplot(aes(Expt, Avg, fill=as.factor(Expt))) +\n  geom_col(show.legend = FALSE) +\n  scale_fill_manual(values = IBMColor) +\n  scale_y_continuous(limits = c(750, 950), breaks = seq(750, 950, 50))\n\nWarning: Removed 5 rows containing missing values (`geom_col()`).\n\n\n\n\n\n\n\n\n\n\nthat because, I didn’t set proper coordinate system.\nwhen I zoom in or zoom out the plot, I should be careful coordinate system.\nif I set wrong coordinate system, data would clip (remove unseen data points).\nIf the purpose is to zoom, use the limit argument in the coordinate system (see coord_cartesian()).\n\ndf1 |&gt; \n  ggplot(aes(Expt, Avg, fill=as.factor(Expt))) +\n  geom_col(show.legend = FALSE) +\n  scale_fill_manual(values = IBMColor) +\n  scale_y_continuous(breaks = seq(750, 950, 50)) +\n  coord_cartesian(ylim = c(750,950))\n\n\n\n\n\n\n\n\n\n\ndf1 |&gt; \n  ggplot(aes(Expt, Avg, fill=as.factor(Expt))) +\n  geom_col(show.legend = FALSE) +\n  geom_hline(yintercept =  mean(df1$Avg), lty = 3, linewidth = 1, color = \"#000000\") + # native R pipe operator NOT support '.Avg'  \n  scale_fill_manual(values = IBMColor) +\n  scale_y_continuous(breaks = seq(750, 950, 50)) +\n  coord_cartesian(ylim = c(750,950))\n\n\n\n\n\n\n\n\n\n\ndf1 |&gt; \n  ggplot(aes(Expt, Avg, fill=as.factor(Expt), label = Avg)) +\n  geom_col(show.legend = FALSE) +\n  geom_hline(yintercept =  mean(df1$Avg), lty = 3, linewidth = 1, color = \"#000000\") + # native R pipe operator NOT support '.Avg'  \n  geom_text(vjust = 2.5, fontface = \"bold\", color = \"white\") +\n  annotate(\"text\", x = 4.5, y = 870, label = paste0(\"Average of Light speed is 852.5km/sec\",\"\\n\",\"(with 299,000 subtracted)\")) +\n  scale_fill_manual(values = IBMColor) +\n  scale_y_continuous(breaks = seq(750, 950, 50)) +\n  coord_cartesian(ylim = c(750,950))\n\n\n\n\n\n\n\n\n\n\ndf1 |&gt; \n  ggplot(aes(Expt, Avg, fill=as.factor(Expt), label = Avg)) +\n  geom_col(show.legend = FALSE) +\n  geom_hline(yintercept =  mean(df1$Avg), lty = 3, linewidth = 1, color = \"#000000\") + # native R pipe operator NOT support '.Avg'  \n  geom_text(vjust = 2.5, fontface = \"bold\", color = \"white\") +\n  annotate(\"text\", x = 4.5, y = 870, label = paste0(\"Average of Light speed is 852.5km/sec\",\"\\n\",\"(with 299,000 subtracted)\")) +\n  scale_fill_manual(values = IBMColor) +\n  scale_y_continuous(breaks = seq(750, 950, 50)) +\n  coord_cartesian(ylim = c(750,950)) +\n  labs(x = \"The experiment number\", y = \"Avg. Speed-of-light (km/s, with -299,000km/s)\", \n       title = \"Michelson Speed of Light Data\",\n       subtitle = paste0(\"A classical data of Michelson (but not this one with Morley) on measurements done\",\"\\n\",\"in 1879 on the speed of light.\")) +\n  theme_bw()\n\n\n\n\n\n\n\n\n\nEND OF POST"
  },
  {
    "objectID": "posts/nb_004/index.html",
    "href": "posts/nb_004/index.html",
    "title": "Area plot with Nile",
    "section": "",
    "text": "In this post, I’ll talk area plot with Nile dataset. as you know, Nile is one of the famous time series dataset.\nsometimes, time series dataset is hard to give message to reader.\nTo overcome it, I often use area plot as followings;"
  },
  {
    "objectID": "posts/nb_004/index.html#initializing",
    "href": "posts/nb_004/index.html#initializing",
    "title": "Area plot with Nile",
    "section": "Initializing",
    "text": "Initializing\nI usually use the following code for initialization. If you don’t want to remove plots and/or variables, you can skip it.\n\ngraphics.off()\nrm(list = ls())\ngc()\n\n          used (Mb) gc trigger (Mb) limit (Mb) max used (Mb)\nNcells  578472 30.9    1318140 70.4         NA   669274 35.8\nVcells 1057767  8.1    8388608 64.0      16384  1851504 14.2\n\n\n\nversion\n\n               _                           \nplatform       aarch64-apple-darwin20      \narch           aarch64                     \nos             darwin20                    \nsystem         aarch64, darwin20           \nstatus                                     \nmajor          4                           \nminor          3.1                         \nyear           2023                        \nmonth          06                          \nday            16                          \nsvn rev        84548                       \nlanguage       R                           \nversion.string R version 4.3.1 (2023-06-16)\nnickname       Beagle Scouts"
  },
  {
    "objectID": "posts/nb_004/index.html#loading-useful-library",
    "href": "posts/nb_004/index.html#loading-useful-library",
    "title": "Area plot with Nile",
    "section": "Loading Useful Library",
    "text": "Loading Useful Library\nWe want to use as few packages (some might call them “libraries”) as possible. If possible, I’m going to use only the tidyverse package. Tidyverse is one of the most famous packages in R programming, and it’s really powerful and useful.\nMoreover, I loaded tsibble package. tsibble is the package to wrangle a time series dataset.\ntsibble is also the one of tidyverse eco-system.\nIf you need to handle time series dataset with tidyverse package, tsibble definitely is a good choice.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(tsibble)\n\n\nAttaching package: 'tsibble'\n\nThe following object is masked from 'package:lubridate':\n\n    interval\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, union"
  },
  {
    "objectID": "posts/nb_004/index.html#select-dataset",
    "href": "posts/nb_004/index.html#select-dataset",
    "title": "Area plot with Nile",
    "section": "Select Dataset",
    "text": "Select Dataset\nWhen I write posts in my blog, I use the built-in dataset because I don’t want the reader to suffer by having to find the data from somewhere else.\nThe dataset I’ll be using in this post is shown below ⬇️ .\n\nFlow of the River Nile\n\nDescription\nMeasurements of the annual flow of the river Nile at Aswan (formerly Assuan), 1871–1970, in 10^8 m^3, “with apparent changepoint near 1898” (Cobb(1978), Table 1, p.249).\n\n\nUsage\nNile\n\n\nFormat\nA time series of length 100.\n\n\nSource\nDurbin, J. and Koopman, S. J. (2001). Time Series Analysis by State Space Methods. Oxford University Press. http://www.ssfpack.com/DKbook.html\n\nAll rigth! Take a look the dataset.\n\nNile\n\nTime Series:\nStart = 1871 \nEnd = 1970 \nFrequency = 1 \n  [1] 1120 1160  963 1210 1160 1160  813 1230 1370 1140  995  935 1110  994 1020\n [16]  960 1180  799  958 1140 1100 1210 1150 1250 1260 1220 1030 1100  774  840\n [31]  874  694  940  833  701  916  692 1020 1050  969  831  726  456  824  702\n [46] 1120 1100  832  764  821  768  845  864  862  698  845  744  796 1040  759\n [61]  781  865  845  944  984  897  822 1010  771  676  649  846  812  742  801\n [76] 1040  860  874  848  890  744  749  838 1050  918  986  797  923  975  815\n [91] 1020  906  901 1170  912  746  919  718  714  740\n\n\n\nI got ts object which means time series dataset. ts is a vector or matrix of the observed time-series values. And this has observation time(start, end) and the number of observations per unit of time(frequency).\n\nclass(Nile)\n\n[1] \"ts\"\n\n\n\nI’ll manipulate Nile dataset with tidyverse eco-system, so I convert ts object to tsibble object. tsibble object is form of dataframe.\n\n#coerce ts to tsibble\ndf &lt;- as_tsibble(Nile)\ndf |&gt; head()\n\n# A tsibble: 6 x 2 [1Y]\n  index value\n  &lt;dbl&gt; &lt;dbl&gt;\n1  1871  1120\n2  1872  1160\n3  1873   963\n4  1874  1210\n5  1875  1160\n6  1876  1160\n\n\n\nclass(df)\n\n[1] \"tbl_ts\"     \"tbl_df\"     \"tbl\"        \"data.frame\"\n\n\n\nthen, check how big Nile dataset. it has 100 rows and 2 column. very tiny.\n\ndim(df)\n\n[1] 100   2\n\n\n\nName the columns “Years” for the first column and “Flows” for the second column.\n\ncolnames(df) &lt;- c(\"year\", \"flow\")\ndf |&gt; head()\n\n# A tsibble: 6 x 2 [1Y]\n   year  flow\n  &lt;dbl&gt; &lt;dbl&gt;\n1  1871  1120\n2  1872  1160\n3  1873   963\n4  1874  1210\n5  1875  1160\n6  1876  1160\n\n\n\nNow you’ve created a simple line plot with ggplot. But while a simple line plot can show variation, it doesn’t convey a message.\nReaders can see that somewhere after 1875, the flow of the Nile must have dropped sharply and then increased sharply the following year. They can also see that around 1912, the flow of the Nile was the lowest we’ve ever measured.\nAnd it looks like the flow in the first half of the measured data is higher than the flow in the second half.\n\ndf |&gt; \n  ggplot(aes(year, flow)) +\n  geom_line()\n\n\n\n\n\n\n\n\n\nI want to divide the Nile flow into two periods (first half, second half) and compare the flows, while also capturing one of the most important elements of time series data: change from before in one plot.\nTo do this, I’ve create two more column with mutate() function. The grp column will distinguish whether first half or second half.\nAnd the lag column will store the difference from the previous year.\n\n\n\n\n\n\nNote\n\n\n\nWith the availability of the tidyverse ecosystem, you can easily manipulate the shape of your data using functions like mutate.\nFor this reason, it is convenient to use time series data in tsibble objects.\n\n\n\ndf1 &lt;- \n  df |&gt; \n  mutate(grp = cut_number(year, 2, labels = FALSE), \n         lag = difference(flow, default = 0))\ndf1\n\n# A tsibble: 100 x 4 [1Y]\n    year  flow   grp   lag\n   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt;\n 1  1871  1120     1     0\n 2  1872  1160     1    40\n 3  1873   963     1  -197\n 4  1874  1210     1   247\n 5  1875  1160     1   -50\n 6  1876  1160     1     0\n 7  1877   813     1  -347\n 8  1878  1230     1   417\n 9  1879  1370     1   140\n10  1880  1140     1  -230\n# ℹ 90 more rows"
  },
  {
    "objectID": "posts/nb_004/index.html#visualization",
    "href": "posts/nb_004/index.html#visualization",
    "title": "Area plot with Nile",
    "section": "Visualization",
    "text": "Visualization\nI got area plot with df1 dataset.\nflow colored midnight blue and lag colored orange place in one plot.\n\ndf1 |&gt; \n  ggplot(aes(year)) +\n  geom_area(aes(y = flow), fill = \"midnightblue\") +\n  geom_area(aes(y = lag), fill = \"orange\")\n\n\n\n\n\n\n\n\n\nTo make it easier to understand, I’ve divided it into two parts, the first half and the second half. I then use the facet_wrap() function to place the first 50 years on top and the second 50 years on the bottom.\nTo make it easier to distinguish between the first and second halves, I created a grp column when manipulating the data, assigning a value of 1 to data in the first half and a value of 2 to data in the second half.\n\ndf1 |&gt; \n  ggplot(aes(year)) +\n  geom_area(aes(y = flow), fill = \"midnightblue\") +\n  geom_area(aes(y = lag), fill = \"orange\") +\n  facet_wrap(vars(grp), ncol = 1)\n\n\n\n\n\n\n\n\n\nI’ve used the facet_wrap() function to divide the first half and second half, but the labels are difficult to understand because they take the data values as they are. Maybe lots of readers can not notice “1” means first half.\nTherefore, to change the labels to make the graph easier to understand, we have used labeller() like below.\n\ngrp_status &lt;- c( \"1\" = \"First 50years\", \"2\" = \"Second 50years\")\n\n\ndf1 |&gt; \n  ggplot(aes(year)) +\n  geom_area(aes(y = flow), fill = \"midnightblue\") +\n  geom_area(aes(y = lag), fill = \"orange\") +\n  facet_wrap(vars(grp), ncol = 1, scale = \"free_x\", labeller = labeller(grp = grp_status))\n\n\n\n\n\n\n\n\n\nI’ve put legend to understand what each colored area means.\n\ndf1 |&gt; \n  ggplot(aes(year)) +\n  geom_area(aes(y = flow, fill = \"Flow\")) +\n  geom_area(aes(y = lag, fill = \"Lag\")) +\n  facet_wrap(vars(grp), ncol = 1, scale = \"free_x\", labeller = labeller(grp = grp_status)) +\n  scale_fill_manual(name = \"Legend\", values = c(\"Flow\" = \"midnightblue\", \"Lag\" = \"orange\"))\n\n\n\n\n\n\n\n\n\nThe first 50 years of the 100-year period saw more change, while the second 50 years saw less change.\nAnd by looking at the lag area, colored orange, readers can also see when there was a large change in flow.\nAt the end of this process, I get a plot like the one below. It can easily convey more information compared to a simple line plot.\n\ndf1 |&gt; \n  ggplot(aes(year)) +\n  geom_area(aes(y = flow, fill = \"Flow\")) +\n  geom_area(aes(y = lag, fill = \"Lag\")) +\n  facet_wrap(vars(grp), ncol = 1, scale = \"free_x\", labeller = labeller(grp = grp_status)) +\n  scale_fill_manual(name = \"Legend\", values = c(\"Flow\" = \"midnightblue\", \"Lag\" = \"orange\")) +\n  labs(title = \"Flow of the River Nile\", \n       subtitle = paste0(\"Measurements of the annual flow of the river Nile at Aswan (formerly Assuan), 1871–1970,\",\"\\n\" ,\"in 10^8 m^3\"),\n       x = \"Year\", y = \"Flow (10^8 cu.m)\") +\n  theme_bw() + theme(legend.position = \"bottom\", \n                     legend.box.background = element_rect(colour = \"black\"))\n\n\n\n\n\n\n\n\n\nEND OF POST"
  },
  {
    "objectID": "posts/nb_010/index.html",
    "href": "posts/nb_010/index.html",
    "title": "Strip plot with WorldPhones",
    "section": "",
    "text": "Today we’re going to draw a horizontal stacked bar graph.\nA surprisingly common use of these plots is a single bar graph lying on its side, which I call a “strip plot”.\nIt’s useful when you want to fill in details when drawing a pie plot, or when you want to see approximate proportions and absolute values at once."
  },
  {
    "objectID": "posts/nb_010/index.html#initializing",
    "href": "posts/nb_010/index.html#initializing",
    "title": "Strip plot with WorldPhones",
    "section": "Initializing",
    "text": "Initializing\nI usually use the following code for initialization. If you don’t want to remove plots and/or variables, you can skip it.\n\ngraphics.off()\nrm(list = ls())\ngc()\n\n          used (Mb) gc trigger (Mb) limit (Mb) max used (Mb)\nNcells  585986 31.3    1339542 71.6         NA   669405 35.8\nVcells 1078765  8.3    8388608 64.0      16384  1851683 14.2\n\n\n\nversion\n\n               _                           \nplatform       aarch64-apple-darwin20      \narch           aarch64                     \nos             darwin20                    \nsystem         aarch64, darwin20           \nstatus                                     \nmajor          4                           \nminor          3.1                         \nyear           2023                        \nmonth          06                          \nday            16                          \nsvn rev        84548                       \nlanguage       R                           \nversion.string R version 4.3.1 (2023-06-16)\nnickname       Beagle Scouts"
  },
  {
    "objectID": "posts/nb_010/index.html#loading-useful-library",
    "href": "posts/nb_010/index.html#loading-useful-library",
    "title": "Strip plot with WorldPhones",
    "section": "Loading Useful Library",
    "text": "Loading Useful Library\nWe want to use as few packages (some might call them “libraries”) as possible. If possible, I’m going to use only the tidyverse package. Tidyverse is one of the most famous packages in R programming, and it’s really powerful and useful.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.4.4     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors"
  },
  {
    "objectID": "posts/nb_010/index.html#select-dataset",
    "href": "posts/nb_010/index.html#select-dataset",
    "title": "Strip plot with WorldPhones",
    "section": "Select Dataset",
    "text": "Select Dataset\nWhen I write posts in my blog, I use the built-in dataset because I don’t want the reader to suffer by having to find the data from somewhere else.\nThe dataset I’ll be using in this post is shown below ⬇️ ⬇️ ⬇️.\n\nThe World’s Telephones\nDescription The number of telephones in various regions of the world (in thousands).\nUsage\nWorldPhones\nFormat\nA matrix with 7 rows and 8 columns. The columns of the matrix give the figures for a given region, and the rows the figures for a year.\nThe regions are: North America, Europe, Asia, South America, Oceania, Africa, Central America.\nThe years are: 1951, 1956, 1957, 1958, 1959, 1960, 1961.\nSource\nAT&T (1961) The World’s Telephones.\nReferences\nMcNeil, D. R. (1977) Interactive Data Analysis. New York: Wiley.\n\nWorldPhones |&gt; head()\n\n     N.Amer Europe Asia S.Amer Oceania Africa Mid.Amer\n1951  45939  21574 2876   1815    1646     89      555\n1956  60423  29990 4708   2568    2366   1411      733\n1957  64721  32510 5230   2695    2526   1546      773\n1958  68484  35218 6662   2845    2691   1663      836\n1959  71799  37598 6856   3000    2868   1769      911\n1960  76036  40341 8220   3145    3054   1905     1008\n\n\nWorldPhones dataset is typical matrix object.\n\nWorldPhones |&gt; class()\n\n[1] \"matrix\" \"array\" \n\n\nLet’s change to a dataframe to create a strip plot.\n\ndf &lt;- as.data.frame(WorldPhones)\n\nThe year is in the row name, but I removed the row name and brought it to the first column for convenient data manipulation in the future.\n\ndf &lt;- df |&gt; mutate(year = as.numeric(rownames(df)), .before = \"N.Amer\")\nrownames(df) &lt;- NULL\n\ndf\n\n  year N.Amer Europe Asia S.Amer Oceania Africa Mid.Amer\n1 1951  45939  21574 2876   1815    1646     89      555\n2 1956  60423  29990 4708   2568    2366   1411      733\n3 1957  64721  32510 5230   2695    2526   1546      773\n4 1958  68484  35218 6662   2845    2691   1663      836\n5 1959  71799  37598 6856   3000    2868   1769      911\n6 1960  76036  40341 8220   3145    3054   1905     1008\n7 1961  79831  43173 9053   3338    3224   2005     1076\n\n\n\nclass(df)\n\n[1] \"data.frame\"\n\n\n\ndim(df)\n\n[1] 7 8"
  },
  {
    "objectID": "posts/nb_010/index.html#visualization",
    "href": "posts/nb_010/index.html#visualization",
    "title": "Strip plot with WorldPhones",
    "section": "Visualization",
    "text": "Visualization\nWorldPhones is a matrix, so you can easily draw a dot plot using the built-in function as shown below.\nActually, it’s not bad. 🤔\n\nbarplot(t(WorldPhones)[,7])\ntitle(main = \"World phones data in 1961\")\n\n\n\n\n\n\n\n\nHowever, it would be more intuitive to represent the number of phones in each country on a single line with a length proportional to the number.\nDrawing such a stacked bar chart is not easy with the built-in barplot() function.\nThere are several ways to draw a single stacked bar plot (a.k.a. strip plot), but it is more convenient to use the geom_col() function than to use the geom_bar() function.\n\n\n\n\n\n\nTip\n\n\n\nIn this case, a tip is to leave the x-axis blank aes(x = \"\") for the aesthetic.\n\n\n\ndf |&gt; \n  filter(year == \"1961\") |&gt; \n  pivot_longer(-year, names_to = \"region\", values_to = \"num_tele\") |&gt; \n  ggplot(aes(x = \"\",y = num_tele, fill = region)) +\n  geom_col()\n\n\n\n\n\n\n\n\nWe’re almost there. Now you can reorient the plot, reduce its width, and fill it with a colour of your choice to create a strip plot.\n\ndf |&gt; \n  filter(year == \"1961\") |&gt; \n  pivot_longer(-year, names_to = \"region\", values_to = \"num_tele\") |&gt; \n  ggplot(aes(x = \"\",y = reorder(num_tele, num_tele), fill = region)) +\n  geom_col(width = 0.5) +\n  coord_flip()\n\n\n\n\n\n\n\n\nI added labels to make it easier to see the number of phones and rotated the labels to make them easier to read.\n\ndf |&gt; \n  filter(year == \"1961\") |&gt; \n  pivot_longer(-year, names_to = \"region\", values_to = \"num_tele\") |&gt; \n  ggplot(aes(x = \"\",y = reorder(num_tele, num_tele), fill = region)) +\n  geom_col(width = 0.5) +\n  geom_text(aes(label = num_tele), angle = -90,\n            position = position_stack(vjust = 0.5)) +\n  scale_fill_brewer(palette = \"Set2\") +\n  coord_flip()\n\n\n\n\n\n\n\n\nThe last step is to add a title and a few more embellishments to finish it off.\n\ndf |&gt; \n  filter(year == \"1961\") |&gt; \n  pivot_longer(-year, names_to = \"region\", values_to = \"num_tele\") |&gt; \n  ggplot(aes(x = \"\",y = reorder(num_tele, num_tele), fill = region)) +\n  geom_col(width = 0.5) +\n  geom_text(aes(label = paste0(region,\"\\n\",num_tele)), angle = -90,\n            position = position_stack(vjust = 0.5)) +\n  scale_fill_brewer(palette = \"Set2\") +\n  coord_flip() +\n  labs(title = \"The World's Telephones at 1961\",\n       subtitle = \"The number of telephones in various regions of the world (in thousands).\",\n       fill = \"Region\") +\n  theme_void() +\n  theme(plot.margin = margin(80,10,50,10), legend.position = \"bottom\")\n\n\n\n\n\n\n\n\nGood job! 👍\n\nEND OF POST"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About me",
    "section": "",
    "text": "Hello! Nice to meet you!\nI have been a performance engineer for steam turbines for the past 16 years at DoosanEnerbility If you want to know more about my background as an engineer, please visit my LinkedIn profile. I welcome discussions and questions about operation data processing, visualization, and, if you want, steam turbines and other major power plant equipment (boilers, gas turbines, generators, etc.).\nThe words “steam turbine” and “performance engineer” are probably very foreign to you. If you work in a power plant or produce equipment to generate electricity, you might know them, but for most people, they are unfamiliar😅.\nAs I mentioned earlier, I am a steam turbine engineer and have a background in mechanical engineering, based in South Korea and my current role is to provide engineering solutions to customers for power plant operational issues.\nI enjoy analyzing data, which is why I started using R, a statistical language, and am now very interested in data visualization. Most of the data I worked with is time series data from power plants, and my main job was to analyze it to find the root cause of issues and suggest solutions, so it’s necessary to me to be able to visualize what I need in order to deliver intuitive messages to customers.\nTo build this blog, I use Quarto and publish it to github. Quarto is one of my favorite publishing tool! If you haven’t tried it yet, you should give it a try."
  }
]