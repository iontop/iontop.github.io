---
title: "Bar Plot with HairEyeColor"
author: "Sean Ahn"
date: "2023-08-19"
categories: [ggplot, visualization]
image: "image.png"
---

In this blog post, we'll cover how to plot a bar plot with ggplot2. Bar plots are one of the most popular graphs because they can convey meaning simply and intuitively.

## Initilize

I usually use the following code for initialization. If you don't want to remove plots and/or variables, you can skip it.

```{r}
graphics.off()
rm(list = ls())
gc()
```

```{r}
version
```

## Load Useful Library

We want to use as few packages (some might call them "libraries") as possible. If possible, I'm going to use only the **tidyverse** package. [Tidyverse](https://www.tidyverse.org) is one of the most famous packages in R programming, and it's really powerful and useful.

[sclales](https://scales.r-lib.org) is a popular package in R that helps you convert values easily. It is also compatible with ggplot, which is a great help for visualization.


```{r}
library(tidyverse)
library(scales)

```

## Select Dataset

When I write posts in my blog, I use the built-in dataset because I don't want the reader to suffer by having to find the data from somewhere else.

The dataset I'll be using in this post is shown below `r emo::ji("down_arrow")` .

<br>

**Hair and Eye Color of Statistics Students**

### Description

Distribution of hair and eye color and sex in 592 statistics students.

### Usage

HairEyeColor

### Format

A 3-dimensional array resulting from cross-tabulating 592 observations on 3 variables. The variables and their levels are as follows:

No Name Levels 1 Hair Black, Brown, Red, Blond 2 Eye Brown, Blue, Hazel, Green 3 Sex Male, Female

### Details

The Hair x Eye table comes from a survey of students at the University of Delaware reported by Snee (1974). The split by Sex was added by Friendly (1992a) for didactic purposes.

This data set is useful for illustrating various techniques for the analysis of contingency tables, such as the standard chi-squared test or, more generally, log-linear modelling, and graphical methods such as mosaic plots, sieve diagrams or association plots.

<br>

I use the `head()` function to quickly see what data is in a data set. The `HarEyeColor` dataset is a three-dimensional table, as mentioned above.

:::callout-note

When I asked Bing what the difference was between a table and a data frame, they told me as below;

Bing's answer: A table is a two-dimensional object that stores data in rows and columns, while a data frame is a collection of one-dimensional vectors that can have different data types and can mimic a table. A data frame is a term that comes from R, a programming language for data analysis. A data.table is a special type of data frame that has more features and faster performance.

:::

```{r}
head(HairEyeColor)

```

<br>

Converting to a data frame is better for manipulating data in R. Try to convert table into data frame using `as.data.frame.table()` or `as.data.frame()` then store into the `df` variable.

```{r}
df <- as.data.frame.table(HairEyeColor)
df |> head()

```

## Visualization  

If you were to draw a bar plot to visualize a dataset such as HairEyeColor, you would probably draw a plot like the one below. 

I've plotted a bar plot with men and women represented by different colors and separated by hair color using `facet_wrap()`. 

If we just plotted a bar plot, it would be hard to tell the exact values, so we used `geom_text()` to display the values above each bar. If you want to use `geom_text()` to display the values, be sure to write **label = "the value you want to display"** in `aes()` of `ggplot()`.


```{r}
df |> 
  ggplot(aes(x = Eye, y = Freq, fill = Sex, label = Freq)) +
  geom_col(alpha = 0.8, position = "dodge") +
  geom_text(aes(color = Sex, group = Sex), position = position_dodge(width = 1), vjust = -0.1, show.legend = FALSE) +
  labs(x = "Eye Color", y = "Frequency") +
  facet_wrap(~ Hair, strip.position = c("right")) +
  scale_y_continuous(limits = c(0,80), breaks = seq(0,80,20)) +
  theme_bw()

```

<br>

Sometimes you want to highlight certain values in a bar graph. For example, if you want to highlight the eye colors that have the most of each in the hair color facet, the following code might be one of the appropriate answers. 

You can also use ggplot extensions (such as [gghighlight](https://yutannihilation.github.io/gghighlight/articles/gghighlight.html)), but I only used the ggplot internal functions. The point is that we create one more column called "Chk" and fill it with different colors based on the value of "Chk".

This method is fairly simple, but very useful for displaying specific values without affecting the original dataset (no transformations). 

Especially when you have a large number of values to represent and a large number of bars, you can emphasize the message you want by representing certain values with a different color that stands out.

```{r}
df |> 
  group_by(Hair) |> 
  mutate(Chk = max(Freq) == Freq) |> 
  ggplot(aes(x = Eye, y = Freq, label = Freq, group = Sex)) +
  geom_col(aes(fill = Chk), color = "white", alpha = 0.8, position = "dodge", show.legend = FALSE) +
  geom_text(aes(color = Chk, group = Sex), position = position_dodge(width = 1), vjust = -0.1, show.legend = FALSE) +
  labs(title = "Hair and Eye Color of Statistics Students",
       subtitle = "Distribution of hair and eye color and sex in 592 statistics students.", 
       x = "Eye Color", y = "Frequency") +
  facet_wrap(~ Hair, strip.position = c("right")) +
  scale_y_continuous(limits = c(0,80), breaks = seq(0,80,20)) +
  scale_fill_manual(values = c("gray80","coral")) +
  scale_color_manual(values = c("gray80", "coral")) +
  theme_bw()

```

<br>

When creating a bar plot and adding labels, sometimes you need to include both absolute values and percentages (%). 

This code shows what to do in such situations. There are two ways to do this, I've used the `scales` package in the code below, and I've commented out the other way of calculating the % value and then adding the "%" symbol. Either way is your choice.


```{r}
df |> 
  filter(Sex == "Male") |> 
  group_by(Hair) |> 
  mutate(Ratio = Freq / sum(Freq)) |> 
  ggplot(aes(x = Eye, y = Freq, fill = Hair, label = Ratio)) +
  geom_col(alpha = 0.8) +
  # geom_text(aes(label = paste(round(Ratio*100,1), "%"), color = Hair), vjust = -0.1) +
  geom_text(aes(label = paste0(scales::percent(round(Ratio,3)),"\n","(",Freq,")"), color = Hair), 
            vjust = -0.2, hjust = 0.5, show.legend = FALSE) +
  labs(title = "Hair and Eye Color of Statistics Students",
       subtitle = "Distribution of hair and eye color and sex in 592 statistics students.", 
       x = "Eye Color", y = "Frequency") +
  facet_wrap(~ Hair, strip.position = c("right")) +
  scale_y_continuous(limits = c(0,80), breaks = seq(0,80,20)) +
  theme_bw()
  
```

<br>

Another option is to overlay a line plot on top of a bar chart, which sometimes makes for a great visualization. Actually it's not really necessary for this data set, but if you wanted to show changes over time, a line plot like the one below would be very helpful for readers to understand. 

I think this is an example of how ggplot is a powerful visualization tool. `r emo::ji("+1")`

:::callout-tip
As you can see, when I draw a point, I draw two points for one value. This is to make it look better, so I draw one large point in white and the other smaller one in the same color as the bar. This work makes the distinction between a bar and a point clearer and helps the reader understand the trend of the line more easily.
:::



```{r}
df |> 
  filter(Sex == "Female") |> 
  ggplot(aes(x = Eye, y = Freq, fill = Hair, label = Freq)) +
  geom_col(alpha = 0.8) +
  geom_point(color = "white", size = 4, show.legend = FALSE) +
  geom_point(aes(color = Hair), size = 2, show.legend = FALSE) +
  geom_path(aes(group = Hair, color = Hair), lty = 2, linewidth = 1, show.legend = FALSE) +
  geom_text(aes(color = Hair), vjust = -1.0, show.legend = FALSE) +
  labs(title = "Hair and Eye Color of Statistics Students",
       subtitle = "Distribution of hair and eye color and sex in 592 statistics students.", 
       x = "Eye Color", y = "Frequency") +
  facet_wrap(~ Hair) +
  scale_y_continuous(limits = c(0,80), breaks = seq(0,80,20)) +
  theme_bw()

```

<br>

```{r include=FALSE}
ggsave("image.png")
```

<div class="right">
__END OF POST__
</div>