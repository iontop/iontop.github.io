---
title: "Lollipop plot with Islands"
author: "Sean Ahn"
date: "2024-01-21"
categories: [ggplot, visualization]
image: "nb_009.png"
---

When displaying a large number of datasets in a bar plot or line plot, it is difficult to distinguish between the data due to the phenomenon of overlapping lines.   

**A lollipop plot** is an effective plot to alleviate this phenomenon.  

if you read more information, refer to followings;   

https://www.highcharts.com/docs/chart-and-series-types/lollipop-series    

https://datavizproject.com/data-type/lollipop-chart/  

https://towardsdatascience.com/lollipop-charts-2f748b90f6f0   



## Initializing

I usually use the following code for initialization. If you don't want to remove plots and/or variables, you can skip it.

```{r}
graphics.off()
rm(list = ls())
gc()

```

```{r}
version
```

## Loading Useful Library

We want to use as few packages (some might call them "libraries") as possible. If possible, I'm going to use only the **tidyverse** package. [Tidyverse](https://www.tidyverse.org) is one of the most famous packages in R programming, and it's really powerful and useful.

```{r}
library(tidyverse)

```

## Select Dataset

When I write posts in my blog, I use the built-in dataset because I don't want the reader to suffer by having to find the data from somewhere else.

The dataset I'll be using in this post is shown below `r emo::ji("down_arrow")` `r emo::ji("down_arrow")` `r emo::ji("down_arrow")`.

<br>

**Areas of the World's Major Landmasses** 

Description
The areas in thousands of square miles of the landmasses which exceed 10,000 square miles.  


Usage   
islands  

Format  
A named vector of length 48.  

Source  
The World Almanac and Book of Facts, 1975, page 406.

References  
McNeil, D. R. (1977) Interactive Data Analysis. Wiley.

```{r}
islands

```

## Visualization

`islands` is a numeric in the form of a named vector, so you can easily draw a dot plot using the built-in function as shown below.  

Actually, it's not bad. `r emo::ji("thinking")`   

```{r}
dotchart(log(islands[order(islands)], 10),
   main = "islands data: log10(area) (log10(sq. miles))")
```

It's not ugly, but let's make it a little easier to see and more pleasing to the eye.  

I'll be plotting with `ggplot2` as before, so let's change the numeric vector type of dataset to dataframe.   

Importantly, I need to get the attributes as well.   

To do this, I use the `attributes` function and the `unlist` function.  

```{r}
df <- data_frame(name = unlist(attributes(islands)),
                 area = islands) |> arrange(desc(area))
df
```

I used the `reorder` function to rearrange them to look nice.   

When visualizing a large number of data, it is helpful to order the data before visualizing it to help the reader understand it.  


```{r}
df |> ggplot(aes(x = 0, y = reorder(name, area), xend = log10(area), yend = name, 
                 color = name)) +
  geom_segment(show.legend = FALSE)
```

Let's draw a dot that corresponds to the candy in lollipop.   

This can be done simply by using `geom_point` to draw the dot at the end of the line.

```{r}
df |> ggplot(aes(x = 0, y = reorder(name, area), xend = log10(area), yend = name, 
                 color = name)) +
  geom_segment(show.legend = FALSE) +
  geom_point(aes(x = log10(area)), show.legend = FALSE)

```

Great! It looks much better!

We recommend using colors without duplication whenever possible, as using too many different colors or duplicating the same color can make it difficult to understand the data.   

In this case, we have a lot of data and it's hard to get the colors we want from the built-in palette, so we'll create a custom color palette in the blue family and apply it.   

```{r}
# Create a vector of colors
colors <- c("#191970", "#4682b4", "#b0c4de")

# Create a color palette function
palette_func <- colorRampPalette(colors)

# Generate a color palette with number of rows
color_palette <- palette_func(nrow(df))

```


To give a darker color to a larger area, I gave the `reorder` function the `decreasing` option so that Midnight Blue covers the largest area and Pale Sky Blue covers the smallest area.  


```{r}
df |> ggplot(aes(x = 0, y = reorder(name, area), xend = log10(area), yend = name, 
                 color = reorder(name, area, decreasing = TRUE))) +
  geom_segment(show.legend = FALSE) +
  geom_point(aes(x = log10(area)), show.legend = FALSE) +
  scale_color_manual(values = color_palette) +
  labs(title = "Areas of the World's Major Landmasses",
       subtitle = "The areas in thousands of square miles of the landmasses \nwhich exceed 10,000 square miles.",
       x = "Area, log10(sq.mile)", y = NULL) +
  theme_minimal()
```


Good job! `r emo::ji("+1")`

```{r include=FALSE}
ggsave("nb_009.png")
```

<div class="right">
__END OF POST__
</div>












